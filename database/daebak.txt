CREATE DATABASE DAEBAK
GO

USE DAEBAK
GO

-- USERS Table
CREATE TABLE USERS (
    USER_ID INT PRIMARY KEY IDENTITY(1,1),
    USERNAME VARCHAR(50) UNIQUE NOT NULL,
    PASSWORD_HASH VARCHAR(255) NOT NULL,
    EMAIL VARCHAR(100) UNIQUE NOT NULL,
    FIRST_NAME VARCHAR(50) NOT NULL,
    LAST_NAME VARCHAR(50) NOT NULL,
    PHONE_NUMBER VARCHAR(20),
    ROLE VARCHAR(50) CHECK (ROLE IN ('Homeowner', 'Admin', 'Staff')) NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE()
);

-- HOMEOWNERS Table
CREATE TABLE HOMEOWNERS (
    HOMEOWNER_ID INT PRIMARY KEY IDENTITY(1,1),
    USER_ID INT UNIQUE NOT NULL,
    HOUSE_NUMBER VARCHAR(10) NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- ADMINS Table
CREATE TABLE ADMINS (
    ADMIN_ID INT PRIMARY KEY IDENTITY(1,1),
    USER_ID INT UNIQUE NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- STAFF Table
CREATE TABLE STAFF (
    STAFF_ID INT PRIMARY KEY IDENTITY(1,1),
    USER_ID INT UNIQUE NOT NULL,
    DEPARTMENT VARCHAR(10) NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- EVENTS Table
CREATE TABLE EVENTS (
    EVENT_ID INT PRIMARY KEY IDENTITY(1,1),
    TITLE VARCHAR(100) NOT NULL,
    DESCRIPTION TEXT NULL,
    START_DATE DATETIME NOT NULL,
    END_DATE DATETIME NOT NULL,
    LOCATION VARCHAR(100) NOT NULL,
    CREATED_BY INT,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(USER_ID) ON DELETE SET NULL
);

-- ANNOUNCEMENTS Table
CREATE TABLE ANNOUNCEMENTS (
    ANNOUNCEMENT_ID INT PRIMARY KEY IDENTITY(1,1),
    TITLE VARCHAR(100) NOT NULL,
    CONTENT TEXT NOT NULL,
    CREATED_BY INT,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(USER_ID) ON DELETE SET NULL
);

-- BILLING_ITEMS Table
CREATE TABLE BILLING_ITEMS (
    ITEM_ID INT PRIMARY KEY IDENTITY(1,1),
    ITEM_NAME VARCHAR(100) NOT NULL,
    DESCRIPTION TEXT NOT NULL,
    AMOUNT DECIMAL(10, 2) NOT NULL,
    DUE_DATE DATETIME NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE()
);

-- USER_BILLS Table
CREATE TABLE USER_BILLS (
    BILL_ID INT PRIMARY KEY IDENTITY(1,1),
    USER_ID INT,
    ITEM_ID INT,
    AMOUNT DECIMAL(10, 2) NOT NULL,
    DUE_DATE DATETIME NOT NULL,
    STATUS VARCHAR(20) CHECK (STATUS IN ('Pending', 'Paid', 'Overdue')) NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
    FOREIGN KEY (ITEM_ID) REFERENCES BILLING_ITEMS(ITEM_ID) ON DELETE CASCADE
);

-- PAYMENTS Table (Fixed cascade issue)
CREATE TABLE PAYMENTS (
    PAYMENT_ID INT PRIMARY KEY IDENTITY(1,1),
    BILL_ID INT NULL,
    USER_ID INT NOT NULL,
    PAYMENT_DATE DATETIME NOT NULL,
    AMOUNT DECIMAL(10, 2) NOT NULL,
    PAYMENT_METHOD VARCHAR(50) CHECK (PAYMENT_METHOD IN ('Credit card', 'Bank transfer', 'Online wallet')) NOT NULL,
    STATUS VARCHAR(20) CHECK (STATUS IN ('Completed', 'Failed', 'Pending')) NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (BILL_ID) REFERENCES USER_BILLS(BILL_ID) ON DELETE SET NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE NO ACTION -- Fixed cascade path
);

-- FACILITIES Table
CREATE TABLE FACILITIES (
    FACILITY_ID INT PRIMARY KEY IDENTITY(1,1),
    NAME VARCHAR(100) NOT NULL,
    DESCRIPTION TEXT NOT NULL,
    LOCATION VARCHAR(100) NOT NULL,
    IMAGE VARCHAR(255) NOT NULL
);

-- FACILITY_RESERVATIONS Table
CREATE TABLE FACILITY_RESERVATIONS (
    RESERVATION_ID INT PRIMARY KEY IDENTITY(1,1),
    FACILITY_ID INT,
    USER_ID INT,
    RESERVATION_DATE DATETIME NOT NULL,
    STATUS VARCHAR(10) CHECK (STATUS IN ('Pending', 'Approved', 'Denied')) NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (FACILITY_ID) REFERENCES FACILITIES(FACILITY_ID) ON DELETE CASCADE,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- SERVICE_REQUESTS Table (Fixed multiple cascade issue)
CREATE TABLE SERVICE_REQUESTS (
    REQUEST_ID INT PRIMARY KEY IDENTITY(1,1),
    USER_ID INT,
    HOUSE_NUMBER VARCHAR(10) NULL,
    REQUEST_TYPE VARCHAR(20) CHECK (REQUEST_TYPE IN ('Maintenance', 'Security', 'Other')) NOT NULL,
    DESCRIPTION TEXT NOT NULL,
    STATUS VARCHAR(20) CHECK (STATUS IN ('Open', 'In Progress', 'Closed')) NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    ASSIGNED_TO INT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
    FOREIGN KEY (ASSIGNED_TO) REFERENCES USERS(USER_ID) ON DELETE NO ACTION -- Fixed cascade conflict
);

-- DOCUMENTS Table
CREATE TABLE DOCUMENTS (
    DOCUMENT_ID INT PRIMARY KEY IDENTITY(1,1),
    TITLE VARCHAR(100) NOT NULL,
    FILE_PATH VARCHAR(255) NOT NULL,
    CREATED_BY INT,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- VISITOR_PASSES Table
CREATE TABLE VISITOR_PASSES (
    PASS_ID INT PRIMARY KEY IDENTITY(1,1),
    USER_ID INT,
    HOUSE_NUMBER VARCHAR(10) NOT NULL,
    VISITOR_NAME VARCHAR(100) NOT NULL,
    VISIT_DATE DATETIME NOT NULL,
    STATUS VARCHAR(10) CHECK (STATUS IN ('Pending', 'Approved', 'Denied')) NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- VEHICLE_REGISTRATION Table
CREATE TABLE VEHICLE_REGISTRATION (
    VEHICLE_ID INT PRIMARY KEY IDENTITY(1,1),
    USER_ID INT,
    HOUSE_NUMBER VARCHAR(10) NOT NULL,
    VEHICLE_DETAILS VARCHAR(255) NOT NULL,
    STATUS VARCHAR(10) CHECK (STATUS IN ('Pending', 'Approved', 'Denied')) NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- CONTACTS Table
CREATE TABLE CONTACTS (
    CONTACT_ID INT PRIMARY KEY IDENTITY(1,1),
    NAME VARCHAR(100) NOT NULL,
    POSITION VARCHAR(100),
    CONTACT_INFO VARCHAR(255) NOT NULL
);

-- FEEDBACK Table
CREATE TABLE FEEDBACK (
    FEEDBACK_ID INT PRIMARY KEY IDENTITY(1,1),
    USER_ID INT,
    HOUSE_NUMBER VARCHAR(10) NULL,
    FEEDBACK_TYPE VARCHAR(20) CHECK (FEEDBACK_TYPE IN ('Suggestion', 'Complaint', 'Other')) NOT NULL,
    DESCRIPTION TEXT NOT NULL,
    STATUS VARCHAR(10) CHECK (STATUS IN ('Open', 'Resolved')) NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);



-- Creating admin role for Admin login credentials username = admin , password = @dmin_role123

INSERT INTO USERS (USERNAME, PASSWORD_HASH, EMAIL, FIRST_NAME, LAST_NAME, PHONE_NUMBER, CREATED_AT, UPDATED_AT, ROLE)
VALUES (
    'admin',
    '$2a$12$uCVVcLQt1XXWeAK2OSFNh.392zwaVgHmMYwBiLWpFpL68Cx.yhJtK',  -- Bcrypt hashed password (@dmin_role123)
    'admin@example.com',
    'Super',
    'Admin',
    '1234567890',
    GETDATE(),  -- Created at
    GETDATE(),  -- Updated at
    'ADMIN'  -- Role
);