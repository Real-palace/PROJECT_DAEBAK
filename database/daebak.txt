CREATE DATABASE DAEBAK
GO

USE DAEBAK
GO

-- USERS Table
CREATE TABLE USERS (
    USER_ID INT PRIMARY KEY IDENTITY(1,1),
    USERNAME VARCHAR(50) UNIQUE NOT NULL,
    PASSWORD_HASH VARCHAR(255) NOT NULL,
    EMAIL VARCHAR(100) UNIQUE NOT NULL,
    FIRST_NAME VARCHAR(50) NOT NULL,
    LAST_NAME VARCHAR(50) NOT NULL,
    PHONE_NUMBER VARCHAR(20),
    ROLE VARCHAR(50) CHECK (ROLE IN ('Homeowner', 'Admin', 'Staff')) NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE()
);

-- HOMEOWNERS Table
CREATE TABLE HOMEOWNERS (
    HOMEOWNER_ID INT PRIMARY KEY IDENTITY(1,1),
    USER_ID INT UNIQUE NOT NULL,
    HOUSE_NUMBER VARCHAR(10) NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- ADMINS Table
CREATE TABLE ADMINS (
    ADMIN_ID INT PRIMARY KEY IDENTITY(1,1),
    USER_ID INT UNIQUE NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- STAFF Table
CREATE TABLE STAFF (
    STAFF_ID INT PRIMARY KEY IDENTITY(1,1),
    USER_ID INT UNIQUE NOT NULL,
    DEPARTMENT VARCHAR(10) NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- EVENTS Table
CREATE TABLE EVENTS (
    EVENT_ID INT PRIMARY KEY IDENTITY(1,1),
    TITLE VARCHAR(100) NOT NULL,
    DESCRIPTION TEXT NULL,
    START_DATE DATETIME NOT NULL,
    END_DATE DATETIME NOT NULL,
    LOCATION VARCHAR(100) NOT NULL,
    CREATED_BY INT,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(USER_ID) ON DELETE SET NULL
);

-- ANNOUNCEMENTS Table
CREATE TABLE ANNOUNCEMENTS (
    ANNOUNCEMENT_ID INT PRIMARY KEY IDENTITY(1,1),
    TITLE VARCHAR(100) NOT NULL,
    CONTENT TEXT NOT NULL,
    CREATED_BY INT,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(USER_ID) ON DELETE SET NULL
);

CREATE TABLE BILLING_ITEMS (
    ITEM_ID INT PRIMARY KEY IDENTITY(1,1),
    ITEM_NAME VARCHAR(100) NOT NULL,
    DESCRIPTION TEXT NOT NULL,
    AMOUNT DECIMAL(10, 2) NOT NULL,
    DUE_DATE DATETIME NOT NULL,
    IS_RECURRING BIT DEFAULT 0,
    CATEGORY VARCHAR(50) CHECK (CATEGORY IN ('Association Dues', 'Utilities', 'Security', 'Special Assessment', 'Other')),
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE()
);

CREATE TABLE USER_BILLS (
    BILL_ID INT PRIMARY KEY IDENTITY(1,1),
    USER_ID INT,
    ITEM_ID INT,
    BILL_NUMBER VARCHAR(20) NOT NULL,
    AMOUNT DECIMAL(10, 2) NOT NULL,
    DUE_DATE DATETIME NOT NULL,
    STATUS VARCHAR(20) CHECK (STATUS IN ('Pending', 'Paid', 'Overdue', 'Partially Paid')) NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
    FOREIGN KEY (ITEM_ID) REFERENCES BILLING_ITEMS(ITEM_ID) ON DELETE CASCADE
);

CREATE TABLE PAYMENTS (
    PAYMENT_ID INT PRIMARY KEY IDENTITY(1,1),
    BILL_ID INT NULL,
    USER_ID INT NOT NULL,
    RECEIPT_NUMBER VARCHAR(20) NOT NULL,
    PAYMENT_DATE DATETIME NOT NULL,
    AMOUNT DECIMAL(10, 2) NOT NULL,
    PAYMENT_METHOD VARCHAR(50) CHECK (PAYMENT_METHOD IN ('Credit Card', 'GCash', 'Maya', 'Bank Transfer', 'Cash')) NOT NULL,
    REFERENCE_NUMBER VARCHAR(100),
    PAYMENT_DETAILS TEXT,
    PROOF_OF_PAYMENT_URL VARCHAR(255),
    STATUS VARCHAR(20) CHECK (STATUS IN ('Completed', 'Failed', 'Pending')) NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (BILL_ID) REFERENCES USER_BILLS(BILL_ID) ON DELETE SET NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE NO ACTION
);

CREATE TABLE PAYMENT_METHODS (
    METHOD_ID INT PRIMARY KEY IDENTITY(1,1),
    USER_ID INT NOT NULL,
    METHOD_TYPE VARCHAR(50) CHECK (METHOD_TYPE IN ('Credit Card', 'GCash', 'Maya', 'Bank Account')) NOT NULL,
    METHOD_NAME VARCHAR(100),
    MASKED_NUMBER VARCHAR(30),
    EXPIRY_DATE VARCHAR(10),
    IS_DEFAULT BIT DEFAULT 0,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- FACILITIES Table
CREATE TABLE FACILITIES (
    FACILITY_ID INT PRIMARY KEY IDENTITY(1,1),
    NAME VARCHAR(100) NOT NULL,
    DESCRIPTION TEXT NOT NULL,
    LOCATION VARCHAR(100) NOT NULL,
    IMAGE VARCHAR(255) NOT NULL,
    CAPACITY INT NOT NULL DEFAULT 0,
    IS_AVAILABLE BIT NOT NULL DEFAULT 1
);

-- FACILITY_RESERVATIONS Table
CREATE TABLE FACILITY_RESERVATIONS (
    RESERVATION_ID INT PRIMARY KEY IDENTITY(1,1),
    FACILITY_ID INT,
    USER_ID INT,
    START_DATETIME DATETIME NOT NULL,
    END_DATETIME DATETIME NOT NULL,
    STATUS VARCHAR(20) CHECK (STATUS IN ('Pending', 'Confirmed', 'Denied', 'Cancelled', 'Completed')) NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (FACILITY_ID) REFERENCES FACILITIES(FACILITY_ID) ON DELETE CASCADE,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- SERVICE_REQUESTS Table (Updated to match UI)
CREATE TABLE SERVICE_REQUESTS (
    REQUEST_ID INT PRIMARY KEY IDENTITY(1,1),
    USER_ID INT NOT NULL,                  -- Links to the homeowner's record
    REQUEST_TYPE VARCHAR(20) CHECK (REQUEST_TYPE IN ('Maintenance', 'Security')) NOT NULL,  -- Updated values to match UI
    LOCATION VARCHAR(255) NOT NULL,        -- Added field from UI form
    DESCRIPTION TEXT NOT NULL,
    STATUS VARCHAR(20) CHECK (STATUS IN ('Open', 'In Progress', 'Scheduled', 'Completed', 'Cancelled')) NOT NULL,  -- Updated to match UI statuses
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    ASSIGNED_TO INT NULL,
    SCHEDULED_DATE DATETIME NULL,          -- For scheduled maintenance dates
    STAFF_NOTES TEXT NULL,                 -- For staff notes shown in details modal
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
    FOREIGN KEY (ASSIGNED_TO) REFERENCES USERS(USER_ID) ON DELETE NO ACTION
);

-- Create a table for request images
CREATE TABLE REQUEST_IMAGES (
    IMAGE_ID INT PRIMARY KEY IDENTITY(1,1),
    REQUEST_ID INT NOT NULL,
    IMAGE_PATH VARCHAR(255) NOT NULL,
    UPLOADED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (REQUEST_ID) REFERENCES SERVICE_REQUESTS(REQUEST_ID) ON DELETE CASCADE
);

-- Create a table for request timeline events
CREATE TABLE REQUEST_TIMELINE (
    EVENT_ID INT PRIMARY KEY IDENTITY(1,1),
    REQUEST_ID INT NOT NULL,
    EVENT_TYPE VARCHAR(50) NOT NULL, -- 'Submitted', 'Reviewed', 'In Progress', 'Scheduled', 'Completed', etc.
    EVENT_DATE DATETIME NOT NULL,
    EVENT_DESCRIPTION TEXT NULL,
    CREATED_BY INT NULL,
    FOREIGN KEY (REQUEST_ID) REFERENCES SERVICE_REQUESTS(REQUEST_ID) ON DELETE CASCADE,
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(USER_ID) ON DELETE NO ACTION
);

-- VISITOR_PASSES Table
CREATE TABLE VISITOR_PASSES (
    PASS_ID INT PRIMARY KEY IDENTITY(1,1),
    USER_ID INT,
    HOUSE_NUMBER VARCHAR(10) NOT NULL,
    VISITOR_NAME VARCHAR(100) NOT NULL,
    VISIT_DATE DATETIME NOT NULL,
    STATUS VARCHAR(10) CHECK (STATUS IN ('Pending', 'Approved', 'Denied')) NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- VEHICLE_REGISTRATION Table
CREATE TABLE VEHICLE_REGISTRATION (
    VEHICLE_ID INT PRIMARY KEY IDENTITY(1,1),
    USER_ID INT,
    HOUSE_NUMBER VARCHAR(10) NOT NULL,
    VEHICLE_DETAILS VARCHAR(255) NOT NULL,
    STATUS VARCHAR(10) CHECK (STATUS IN ('Pending', 'Approved', 'Denied')) NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- DOCUMENTS Table
CREATE TABLE DOCUMENTS (
    DOCUMENT_ID INT PRIMARY KEY IDENTITY(1,1),
    TITLE VARCHAR(100) NOT NULL,
    FILE_PATH VARCHAR(255) NOT NULL,
    CREATED_BY INT,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- CONTACTS Table
CREATE TABLE CONTACTS (
    CONTACT_ID INT PRIMARY KEY IDENTITY(1,1),
    NAME VARCHAR(100) NOT NULL,
    POSITION VARCHAR(100),
    CONTACT_INFO VARCHAR(255) NOT NULL
);

-- Creating admin role for Admin login credentials username = admin , password = @dmin_role123

INSERT INTO USERS (USERNAME, PASSWORD_HASH, EMAIL, FIRST_NAME, LAST_NAME, PHONE_NUMBER, CREATED_AT, UPDATED_AT, ROLE)
VALUES (
    'admin',
    '$2a$12$uCVVcLQt1XXWeAK2OSFNh.392zwaVgHmMYwBiLWpFpL68Cx.yhJtK',  -- Bcrypt hashed password (@dmin_role123)
    'admin@example.com',
    'Super',
    'Admin',
    '1234567890',
    GETDATE(),  -- Created at
    GETDATE(),  -- Updated at
    'ADMIN'  -- Role
);