@model List<daebak_subdivision_website.Models.ServiceRequestView>
@{
    ViewData["Title"] = "Services";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Services Banner -->
<div class="bg-primary rounded-xl shadow-lg overflow-hidden flex items-end justify-between mt-4 relative">
    <img src="~/images/services_banner.jpg" alt="Services Image" class="absolute bottom-0 left-0 h-48 md:h-auto md:w-72 lg:w-80">
    <div class="ml-0 md:ml-72 lg:ml-80 p-6 md:p-8">
        <h2 class="text-2xl md:text-3xl font-semibold text-tertiary">Subdivision Services</h2>
        <p class="text-gray-700 font-light mt-2">Submit and track service requests for maintenance and security issues.</p>
    </div>
</div>

<!-- Tab Navigation -->
<div class="flex border-b border-gray-200 mt-8">
    <button id="submit-tab" class="py-3 px-6 border-b-2 border-secondary text-secondary font-medium">Submit Request</button>
    <button id="track-tab" class="py-3 px-6 text-gray-500 font-medium">Track Requests</button>
</div>

<!-- Submit Request Section -->
<div id="submit-section" class="mt-6">
    <div class="bg-white p-6 rounded-xl shadow-md">
        <div class="flex items-center gap-2 mb-6">
            <i class="ph ph-clipboard-text text-lg text-tertiary"></i>
            <h3 class="font-semibold text-lg text-tertiary">New Service Request</h3>
        </div>
        
        <form id="service-request-form" asp-controller="ServiceRequests" asp-action="Create" method="post">
            @Html.AntiForgeryToken()
            <!-- Request Type Selection -->
            <div class="mb-5">
                <label class="block text-gray-700 text-sm font-medium mb-2">Request Type <span class="text-red-500">*</span></label>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="relative">
                        <input type="radio" id="maintenance" name="RequestType" value="Maintenance" class="hidden peer" required checked>
                        <label for="maintenance" class="flex items-center p-4 border rounded-lg cursor-pointer peer-checked:border-secondary peer-checked:bg-secondary/5 hover:bg-gray-50">
                            <i class="ph ph-hammer text-2xl mr-3 text-gray-500 peer-checked:text-secondary"></i>
                            <div>
                                <div class="font-medium">Maintenance Request</div>
                                <div class="text-xs text-gray-500">Plumbing, electrical, common areas</div>
                            </div>
                        </label>
                    </div>
                    
                    <div class="relative">
                        <input type="radio" id="security" name="RequestType" value="Security" class="hidden peer" required>
                        <label for="security" class="flex items-center p-4 border rounded-lg cursor-pointer peer-checked:border-secondary peer-checked:bg-secondary/5 hover:bg-gray-50">
                            <i class="ph ph-shield-warning text-2xl mr-3 text-gray-500"></i>
                            <div>
                                <div class="font-medium">Security Concern</div>
                                <div class="text-xs text-gray-500">Suspicious activity, safety issues</div>
                            </div>
                        </label>
                    </div>
                </div>
            </div>
            
            <!-- Request Form Fields -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-5">
                <div class="md:col-span-2">
                    <label class="block text-gray-700 text-sm font-medium mb-2" for="location">
                        Location <span class="text-red-500">*</span>
                    </label>
                    <input type="text" id="location" name="Location" class="bg-white border border-gray-300 p-2 rounded w-full focus:outline-none focus:ring-2 focus:ring-primary" placeholder="Please specify the exact location" required>
                </div>
                
                <div class="md:col-span-2">
                    <label class="block text-gray-700 text-sm font-medium mb-2" for="description">
                        Detailed Description <span class="text-red-500">*</span>
                    </label>
                    <textarea id="description" name="Description" rows="4" class="bg-white border border-gray-300 p-2 rounded w-full focus:outline-none focus:ring-2 focus:ring-primary" placeholder="Please provide details about the issue..." required></textarea>
                </div>
                
                <div class="md:col-span-2">
                    <label class="block text-gray-700 text-sm font-medium mb-2" for="image-upload">
                        Upload Images (Optional)
                    </label>
                    <div class="border border-dashed border-gray-300 rounded-lg p-6 text-center">
                        <input type="file" id="image-upload" name="Images" multiple accept="image/*" class="hidden">
                        <label for="image-upload" class="cursor-pointer flex flex-col items-center justify-center gap-2">
                            <i class="ph ph-upload-simple text-2xl text-gray-400"></i>
                            <span class="text-sm text-gray-500">Click to upload images</span>
                            <span class="text-xs text-gray-400">(Max 3 images, 5MB each)</span>
                        </label>
                    </div>
                    <div id="image-preview" class="mt-3 flex flex-wrap gap-2"></div>
                </div>
            </div>
            
            <div class="flex justify-end gap-3">
                <button type="button" id="cancel-request" class="bg-gray-100 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-200 transition-colors">
                    Cancel
                </button>
                <button type="submit" class="bg-secondary text-white py-2 px-4 rounded-lg hover:bg-secondary/90 transition-colors">
                    Submit Request
                </button>
            </div>
        </form>
    </div>
    
    <!-- Service Categories -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mt-8">
        <!-- Maintenance Services -->
        <div class="bg-white p-6 rounded-xl shadow-md">
            <div class="text-secondary mb-4"><i class="ph ph-hammer text-3xl"></i></div>
            <h3 class="text-lg font-semibold text-tertiary mb-2">Maintenance Services</h3>
            <ul class="space-y-2 text-gray-600 text-sm">
                <li class="flex items-center gap-2">
                    <i class="ph ph-check-circle text-green-500"></i>
                    <span>Plumbing repairs</span>
                </li>
                <li class="flex items-center gap-2">
                    <i class="ph ph-check-circle text-green-500"></i>
                    <span>Electrical issues</span>
                </li>
                <li class="flex items-center gap-2">
                    <i class="ph ph-check-circle text-green-500"></i>
                    <span>Common area maintenance</span>
                </li>
                <li class="flex items-center gap-2">
                    <i class="ph ph-check-circle text-green-500"></i>
                    <span>Street light repairs</span>
                </li>
                <li class="flex items-center gap-2">
                    <i class="ph ph-check-circle text-green-500"></i>
                    <span>Landscape maintenance</span>
                </li>
            </ul>
        </div>
        
        <!-- Security Services -->
        <div class="bg-white p-6 rounded-xl shadow-md">
            <div class="text-secondary mb-4"><i class="ph ph-shield text-3xl"></i></div>
            <h3 class="text-lg font-semibold text-tertiary mb-2">Security Services</h3>
            <ul class="space-y-2 text-gray-600 text-sm">
                <li class="flex items-center gap-2">
                    <i class="ph ph-check-circle text-green-500"></i>
                    <span>Security patrols</span>
                </li>
                <li class="flex items-center gap-2">
                    <i class="ph ph-check-circle text-green-500"></i>
                    <span>Visitor management</span>
                </li>
                <li class="flex items-center gap-2">
                    <i class="ph ph-check-circle text-green-500"></i>
                    <span>Suspicious activity reports</span>
                </li>
                <li class="flex items-center gap-2">
                    <i class="ph ph-check-circle text-green-500"></i>
                    <span>CCTV monitoring</span>
                </li>
                <li class="flex items-center gap-2">
                    <i class="ph ph-check-circle text-green-500"></i>
                    <span>Access control</span>
                </li>
            </ul>
        </div>
        
        <!-- Emergency Contacts (As a separate card) -->
        <div class="bg-white p-6 rounded-xl shadow-md">
            <div class="text-secondary mb-4"><i class="ph ph-phone text-3xl"></i></div>
            <h3 class="text-lg font-semibold text-tertiary mb-2">Emergency Contacts</h3>
            <div class="space-y-3">
                <div class="flex items-center gap-2">
                    <i class="ph ph-phone-call text-red-500"></i>
                    <div>
                        <div class="font-medium">Security Office</div>
                        <div class="text-sm">+63 917 123 4567</div>
                    </div>
                </div>
                <div class="flex items-center gap-2">
                    <i class="ph ph-phone-call text-red-500"></i>
                    <div>
                        <div class="font-medium">Maintenance Hotline</div>
                        <div class="text-sm">+63 918 987 6543</div>
                    </div>
                </div>
                <div class="flex items-center gap-2">
                    <i class="ph ph-phone-call text-red-500"></i>
                    <div>
                        <div class="font-medium">Property Manager</div>
                        <div class="text-sm">+63 919 345 6789</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Service Policy -->
    <div class="mt-8 bg-white p-6 rounded-xl shadow-md">
        <div class="flex items-center gap-2 mb-4">
            <i class="ph ph-info text-lg text-tertiary"></i>
            <h3 class="font-semibold text-lg text-tertiary">Service Request Policy</h3>
        </div>
        <div class="space-y-3 text-gray-700">
            <p><span class="font-medium">Response Times:</span> Maintenance requests are typically addressed within 24-48 hours. Emergency requests receive immediate attention.</p>
            <p><span class="font-medium">Regular Hours:</span> Monday to Friday, 8:00 AM to 5:00 PM. Emergency services are available 24/7.</p>
            <p><span class="font-medium">Service Coverage:</span> Our maintenance team handles common area issues and infrastructure problems. For in-unit repairs, separate arrangements may be required.</p>
            <p><span class="font-medium">Feedback:</span> After your request is completed, you will receive a survey to rate the service provided.</p>
        </div>
    </div>
</div>

<!-- Track Requests Section (Hidden initially) -->
<div id="track-section" class="mt-6 hidden">
    <div class="bg-white p-6 rounded-xl shadow-md">
        <div class="flex items-center justify-between mb-6">
            <div class="flex items-center gap-2">
                <i class="ph ph-list-checks text-lg text-tertiary"></i>
                <h3 class="font-semibold text-lg text-tertiary">My Service Requests</h3>
            </div>
            
            <!-- Filter Dropdown -->
            <div class="relative">
                <select id="request-filter" class="bg-white border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-primary text-sm">
                    <option value="all">All Requests</option>
                    <option value="Open">Open Requests</option>
                    <option value="Processing">In Progress</option>
                    <option value="Completed">Completed</option>
                    <option value="Cancelled">Cancelled</option>
                </select>
            </div>
        </div>
        
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Location</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Submitted</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200" id="requests-table-body">
                    <!-- Data will be loaded dynamically -->
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Request Details Modal (Hidden by default) -->
<div id="request-details-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-xl p-6 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold text-tertiary">Request Details</h3>
            <button id="close-modal" class="text-gray-500 hover:text-gray-700">
                <i class="ph ph-x text-xl"></i>
            </button>
        </div>
        
        <div id="request-details-content">
            <!-- This will be populated with AJAX -->
            <div class="animate-pulse">
                <div class="h-4 bg-gray-200 rounded w-3/4 mb-4"></div>
                <div class="h-4 bg-gray-200 rounded w-1/2 mb-6"></div>
                <div class="h-20 bg-gray-200 rounded mb-4"></div>
                <div class="grid grid-cols-2 gap-4 mb-4">
                    <div class="h-4 bg-gray-200 rounded"></div>
                    <div class="h-4 bg-gray-200 rounded"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Success Modal (Hidden by default) -->
<div id="success-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-xl p-6 max-w-md w-full">
        <div class="flex flex-col items-center text-center">
            <div class="mb-4 rounded-full bg-green-100 p-3">
                <svg class="h-8 w-8 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
            </div>
            <h3 class="text-xl font-semibold text-gray-900 mb-2">Request Submitted!</h3>
            <p class="text-gray-600 mb-4">Your service request has been successfully submitted. You can track its progress in the Track Requests tab.</p>
            <div class="flex space-x-2">
                <button id="view-requests-btn" class="bg-secondary text-white py-2 px-4 rounded-lg hover:bg-secondary/90 transition-colors">
                    View My Requests
                </button>
                <button id="close-success-modal" class="bg-gray-100 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-200 transition-colors">
                    Close
                </button>
            </div>
            <div id="success-request-details" class="mt-4 text-sm text-gray-600 text-left w-full">
                <!-- Request details will be shown here -->
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Check if we should show the track requests tab
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('tab') === 'track') {
                document.getElementById('track-tab').click();
            }

            // Tab Navigation
            const submitTab = document.getElementById('submit-tab');
            const trackTab = document.getElementById('track-tab');
            const submitSection = document.getElementById('submit-section');
            const trackSection = document.getElementById('track-section');
            
            // Tab switching functionality
            submitTab.addEventListener('click', function() {
                this.classList.add('border-b-2', 'border-secondary', 'text-secondary');
                this.classList.remove('text-gray-500');
                trackTab.classList.remove('border-b-2', 'border-secondary', 'text-secondary');
                trackTab.classList.add('text-gray-500');
                submitSection.classList.remove('hidden');
                trackSection.classList.add('hidden');
            });

            trackTab.addEventListener('click', function() {
                this.classList.add('border-b-2', 'border-secondary', 'text-secondary');
                this.classList.remove('text-gray-500');
                submitTab.classList.remove('border-b-2', 'border-secondary', 'text-secondary');
                submitTab.classList.add('text-gray-500');
                submitSection.classList.add('hidden');
                trackSection.classList.remove('hidden');
                loadServiceRequests();
            });

            // Handle form submission with AJAX
            const serviceRequestForm = document.getElementById('service-request-form');
            const successModal = document.getElementById('success-modal');
            const successRequestDetails = document.getElementById('success-request-details');
            const closeSuccessModal = document.getElementById('close-success-modal');
            const viewRequestsBtn = document.getElementById('view-requests-btn');
            
            serviceRequestForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const formData = new FormData(this);
                
                // Fix image uploads by first checking if the input exists
                const imageUpload = document.getElementById('image-upload');
                if (imageUpload && imageUpload.files.length > 0) {
                    // Remove any previous images that might cause conflicts
                    if (formData.has('Images')) {
                        formData.delete('Images');
                    }
                    
                    // Add each file individually with proper naming
                    for (let i = 0; i < imageUpload.files.length; i++) {
                        formData.append(`Images[${i}]`, imageUpload.files[i]);
                    }
                }
                
                // Show loading state
                const submitBtn = this.querySelector('button[type="submit"]');
                const originalBtnText = submitBtn.innerHTML;
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<i class="ph ph-spinner ph-spin mr-2"></i> Submitting...';
                
                // Add debugging to see what's being sent
                console.log('Form data being submitted:');
                for (let [key, value] of formData.entries()) {
                    console.log(`${key}: ${value instanceof File ? value.name : value}`);
                }
                
                fetch(this.action, {
                    method: 'POST',
                    body: formData,
                    credentials: 'same-origin'
                })
                .then(response => {
                    if (!response.ok) {
                        return response.text().then(text => {
                            throw new Error(`Server responded with status ${response.status}: ${text}`);
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    // Reset button state
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = originalBtnText;
                    
                    if (data.success) {
                        // Reset the form
                        serviceRequestForm.reset();
                        document.getElementById('image-preview').innerHTML = '';
                        
                        // Show success details
                        let detailsHtml = `
                            <div class="mt-4 p-3 bg-gray-50 rounded-lg">
                                <p class="font-medium text-gray-900">Request Details:</p>
                                <ul class="list-disc pl-5 mt-2 space-y-1">
                                    <li><span class="font-medium">Request Type:</span> ${formData.get('RequestType')}</li>
                                    <li><span class="font-medium">Location:</span> ${formData.get('Location')}</li>
                                </ul>
                            </div>
                        `;
                        successRequestDetails.innerHTML = detailsHtml;
                        
                        // Show success modal
                        successModal.classList.remove('hidden');
                    } else {
                        // Display structured error message
                        const errorMessage = data.message || 'Failed to submit service request. Please try again.';
                        showErrorAlert(errorMessage);
                        console.error('Submission error:', data);
                    }
                })
                .catch(error => {
                    // Reset button state
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = originalBtnText;
                    
                    showErrorAlert('An error occurred while submitting the request: ' + error.message);
                    console.error('Form submission error:', error);
                });
            });
            
            // Close success modal
            closeSuccessModal.addEventListener('click', function() {
                successModal.classList.add('hidden');
            });
            
            // View requests button in success modal
            viewRequestsBtn.addEventListener('click', function() {
                successModal.classList.add('hidden');
                trackTab.click();
            });

            // Function to load service requests
            function loadServiceRequests() {
                fetch('/Services/GetUserRequests')
                    .then(response => response.json())
                    .then(requests => {
                        const tableBody = document.getElementById('requests-table-body');
                        tableBody.innerHTML = '';

                        if (requests.length === 0) {
                            const emptyRow = document.createElement('tr');
                            emptyRow.innerHTML = `
                                <td colspan="6" class="px-6 py-4 text-center text-gray-500">
                                    No service requests found
                                </td>
                            `;
                            tableBody.appendChild(emptyRow);
                            return;
                        }

                        requests.forEach(request => {
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm text-gray-900">#SR-${request.id}</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                        <i class="ph ${request.requestType === 'Maintenance' ? 'ph-hammer' : 'ph-shield-warning'} text-secondary mr-2"></i>
                                        <div class="text-sm font-medium text-gray-900">${request.requestType}</div>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm text-gray-900">${request.location || 'N/A'}</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusClass(request.status)}">
                                        ${request.status}
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    ${new Date(request.createdAt).toLocaleDateString()}
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    <button onclick="viewRequestDetails(${request.id})" class="text-secondary hover:text-secondary/80">
                                        View Details
                                    </button>
                                </td>
                            `;
                            tableBody.appendChild(row);
                        });
                    })
                    .catch(error => {
                        console.error('Error loading service requests:', error);
                        const tableBody = document.getElementById('requests-table-body');
                        tableBody.innerHTML = `
                            <tr>
                                <td colspan="6" class="px-6 py-4 text-center text-red-500">
                                    Error loading service requests. Please try again later.
                                </td>
                            </tr>
                        `;
                    });
            }

            // Function to get status class for styling
            function getStatusClass(status) {
                switch (status) {
                    case 'Open':
                        return 'bg-yellow-100 text-yellow-800';
                    case 'Processing':
                        return 'bg-blue-100 text-blue-800';
                    case 'Scheduled':
                        return 'bg-purple-100 text-purple-800';
                    case 'In Progress':
                        return 'bg-indigo-100 text-indigo-800';
                    case 'Completed':
                        return 'bg-green-100 text-green-800';
                    case 'Rejected':
                    case 'Cancelled':
                        return 'bg-red-100 text-red-800';
                    default:
                        return 'bg-gray-100 text-gray-800';
                }
            }

            // Function to view request details
            window.viewRequestDetails = function(requestId) {
                const modal = document.getElementById('request-details-modal');
                const content = document.getElementById('request-details-content');
                
                // Show loading state
                content.innerHTML = `
                    <div class="animate-pulse">
                        <div class="h-4 bg-gray-200 rounded w-3/4 mb-4"></div>
                        <div class="h-4 bg-gray-200 rounded w-1/2 mb-6"></div>
                        <div class="h-20 bg-gray-200 rounded mb-4"></div>
                        <div class="grid grid-cols-2 gap-4 mb-4">
                            <div class="h-4 bg-gray-200 rounded"></div>
                            <div class="h-4 bg-gray-200 rounded"></div>
                        </div>
                    </div>
                `;
                
                modal.classList.remove('hidden');
                  // Fetch request details
                fetch(`/ServiceRequests/GetDetails/${requestId}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Request failed');
                        }
                        return response.json();
                    })
                    .catch(error => {
                        // Fallback to getting from current loaded requests if endpoint fails
                        console.warn('Falling back to local request data:', error);
                        return fetch('/Services/GetUserRequests')
                            .then(response => response.json())
                            .then(requests => {
                                const request = requests.find(r => r.id === requestId);
                                if (!request) {
                                    throw new Error('Request not found in local data');
                                }
                                return request;
                            });
                    })
                    .then(request => {
                        // Format dates
                        const createdDate = new Date(request.createdAt).toLocaleString();
                        
                        // Get status class for styling
                        const statusClass = getStatusClass(request.status);
                        
                        // Build HTML content
                        let statusHistory = `
                            <div class="mb-4">
                                <div class="absolute -left-1.5 mt-1.5 h-3 w-3 rounded-full bg-secondary"></div>
                                <div class="font-medium">Request Submitted</div>
                                <div class="text-xs text-gray-500">${createdDate}</div>
                            </div>
                        `;
                        
                        // Add status update history if available
                        if (request.status !== 'Open' && request.updatedAt) {
                            const updatedDate = new Date(request.updatedAt).toLocaleString();
                            statusHistory += `
                            <div>
                                <div class="absolute -left-1.5 mt-1.5 h-3 w-3 rounded-full bg-secondary"></div>
                                <div class="font-medium">Status Updated to ${request.status}</div>
                                <div class="text-xs text-gray-500">${updatedDate}</div>
                            </div>
                            `;
                        }
                        
                        // Build images section if images exist
                        let imagesSection = '';
                        if (request.images && request.images.length > 0) {
                            // Debug the image structure
                            console.log('Image structure:', JSON.stringify(request.images[0]));
                            
                            imagesSection = `
                            <div class="mb-6">
                                <div class="text-sm font-medium text-gray-700 mb-2">Attachments</div>
                                <div class="grid grid-cols-2 md:grid-cols-3 gap-3">
                                    ${request.images.map(image => {
                                        // Handle different possible image object structures
                                        const imgSrc = typeof image === 'string' 
                                            ? image 
                                            : image.imagePath || image.path || image.url || '';
                                        
                                        return `
                                        <div class="relative">
                                            <img src="${imgSrc}" alt="Request Attachment" 
                                                 class="rounded-lg w-full h-32 object-cover cursor-pointer"
                                                 onclick="window.open('${imgSrc}', '_blank')">
                                        </div>`;
                                    }).join('')}
                                </div>
                            </div>
                            `;
                        } else if (request.imageUrls && request.imageUrls.length > 0) {
                            // Alternative property name the server might use
                            imagesSection = `
                            <div class="mb-6">
                                <div class="text-sm font-medium text-gray-700 mb-2">Attachments</div>
                                <div class="grid grid-cols-2 md:grid-cols-3 gap-3">
                                    ${request.imageUrls.map(imageUrl => `
                                        <div class="relative">
                                            <img src="${imageUrl}" alt="Request Attachment" 
                                                 class="rounded-lg w-full h-32 object-cover cursor-pointer"
                                                 onclick="window.open('${imageUrl}', '_blank')">
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                            `;
                        }
                        
                        // Debugging
                        console.log('Request data:', request);
                        console.log('Images data:', request.images || request.imageUrls);
                        
                        content.innerHTML = `
                            <div class="mb-6">
                                <div class="flex items-center justify-between mb-2">
                                    <h4 class="text-lg font-medium text-gray-900">Request #SR-${request.id}</h4>
                                    <span class="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${statusClass}">
                                        ${request.status}
                                    </span>
                                </div>
                                <div class="text-sm text-gray-500">Submitted on ${createdDate}</div>
                            </div>
                            
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                                <div>
                                    <div class="text-sm font-medium text-gray-700 mb-1">Request Type</div>
                                    <div class="flex items-center">
                                        <i class="ph ${request.requestType === 'Maintenance' ? 'ph-hammer' : 'ph-shield-warning'} text-secondary mr-2"></i>
                                        <span>${request.requestType}</span>
                                    </div>
                                </div>
                                
                                <div>
                                    <div class="text-sm font-medium text-gray-700 mb-1">Location</div>
                                    <div>${request.location || 'Not specified'}</div>
                                </div>
                            </div>
                            
                            <div class="mb-6">
                                <div class="text-sm font-medium text-gray-700 mb-1">Description</div>
                                <div class="p-3 bg-gray-50 rounded-lg text-gray-700">
                                    ${request.description}
                                </div>
                            </div>
                            
                            ${imagesSection}
                            
                            <div class="mb-6">
                                <div class="text-sm font-medium text-gray-700 mb-1">Status History</div>
                                <div class="relative pl-4 border-l-2 border-gray-200">
                                    ${statusHistory}
                                </div>
                            </div>
                            
                            ${request.staffNotes ? `
                            <div class="mb-4">
                                <div class="text-sm font-medium text-gray-700 mb-1">Staff Notes</div>
                                <div class="p-3 bg-blue-50 rounded-lg text-gray-700">
                                    ${request.staffNotes}
                                </div>
                            </div>
                            ` : ''}
                        `;
                    })
                    .catch(error => {
                        content.innerHTML = `
                            <div class="text-center p-6">
                                <div class="text-red-500 mb-2"><i class="ph ph-warning text-3xl"></i></div>
                                <h4 class="text-lg font-medium text-gray-900 mb-1">Error Loading Details</h4>
                                <p class="text-gray-600">Unable to load request details. Please try again later.</p>
                            </div>
                        `;
                        console.error('Error fetching request details:', error);
                    });
            };
            
            // Add close modal functionality
            document.getElementById('close-modal').addEventListener('click', function() {
                document.getElementById('request-details-modal').classList.add('hidden');
            });

            // Filter functionality
            document.getElementById('request-filter').addEventListener('change', function() {
                const filter = this.value;
                const rows = document.querySelectorAll('#requests-table-body tr');
                
                rows.forEach(row => {
                    if (filter === 'all') {
                        row.style.display = '';
                    } else {
                        const statusCell = row.querySelector('td:nth-child(4) span');
                        row.style.display = statusCell.textContent.trim() === filter ? '' : 'none';
                    }
                });
            });

            // Image upload preview functionality
            const imageUpload = document.getElementById('image-upload');
            const imagePreview = document.getElementById('image-preview');

            imageUpload.addEventListener('change', function() {
                imagePreview.innerHTML = '';
                const files = this.files;

                if (files.length > 3) {
                    showErrorAlert('You can only upload a maximum of 3 images');
                    this.value = ''; // Clear the selected files
                    return;
                }

                for (let i = 0; i < files.length; i++) {
                    const file = files[i];
                    if (file.size > 5 * 1024 * 1024) {
                        showErrorAlert('File size must be less than 5MB');
                        continue;
                    }

                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const div = document.createElement('div');
                        div.className = 'relative inline-block mr-2 mb-2';
                        div.innerHTML = `
                            <img src="${e.target.result}" class="h-20 w-20 object-cover rounded">
                            <button type="button" class="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 text-xs" 
                                    onclick="removeImage(this, ${i})">×</button>
                        `;
                        imagePreview.appendChild(div);
                    };
                    reader.readAsDataURL(file);
                }
            });

            // Function to remove images and maintain consistency
            window.removeImage = function(button, index) {
                button.parentElement.remove();
                
                // Create a new FileList without the removed image
                // Unfortunately we can't modify FileList directly, so we'll need to handle this during form submission
                // This just removes the preview for now
                console.log(`Removed image at index ${index}`);
            };

            // Add cancel button functionality 
            document.getElementById('cancel-request').addEventListener('click', function() {
                const formInputs = serviceRequestForm.querySelectorAll('input, textarea');
                let hasInput = false;
                formInputs.forEach(input => {
                    if (input.value.trim() !== '' && input.type !== 'hidden') {
                        hasInput = true;
                    }
                });

                if (hasInput && !confirm('Are you sure you want to clear the form?')) {
                    return;
                }

                // Reset the form
                serviceRequestForm.reset();
                
                // Clear any image previews
                document.getElementById('image-preview').innerHTML = '';
                
                // Clear any error messages that might be displayed
                const errorMessages = document.querySelectorAll('.bg-red-100.border.border-red-400');
                errorMessages.forEach(message => message.remove());
                
                // Optionally, scroll back to top of the form
                serviceRequestForm.scrollIntoView({ behavior: 'smooth' });
            });

            serviceRequestForm.classList.add('opacity-50');
            setTimeout(() => {
                serviceRequestForm.classList.remove('opacity-50');
            }, 300);
        });

        // Add this new function to display errors in a user-friendly way
        function showErrorAlert(message) {
            // Create error alert element
            const errorAlert = document.createElement('div');
            errorAlert.className = 'bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4';
            errorAlert.innerHTML = `
                <strong class="font-bold">Error!</strong>
                <span class="block sm:inline"> ${message}</span>
                <span class="absolute top-0 bottom-0 right-0 px-4 py-3">
                    <svg onclick="this.parentElement.parentElement.remove()" class="fill-current h-6 w-6 text-red-500 cursor-pointer" role="button" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                        <title>Close</title>
                        <path d="M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z"/>
                    </svg>
                </span>
            `;
            
            // Insert at the top of the form
            serviceRequestForm.parentNode.insertBefore(errorAlert, serviceRequestForm);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                if (errorAlert.parentNode) {
                    errorAlert.remove();
                }
            }, 5000);
        }
    </script>
}