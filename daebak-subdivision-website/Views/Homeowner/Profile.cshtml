@model daebak_subdivision_website.Models.UserProfileViewModel
@{
    ViewData["Title"] = "My Profile";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <!-- Add Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>

    <!-- Phosphor Icons -->
    <script src="https://unpkg.com/@@phosphor-icons/web"></script>

    <!-- Custom Tailwind Configuration -->
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: '#94B0DF',
                        secondary: '#356480',
                        tertiary: '#2c3e50',
                        light: '#FCFDFF',
                    }
                },
                fontFamily: {
                    sans: ['Poppins', 'sans-serif'],
                }
            }
        }
    </script>
    <!-- Poppins font import -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap">
</head>
<body class="font-sans bg-light flex min-h-screen">
    <!-- Sidebar -->
    <div class="fixed top-0 left-0 h-screen w-20 bg-primary flex flex-col items-center justify-between py-5 shadow-md z-10">
        <!-- Logo -->
        <div class="w-full flex justify-center py-4">
            <img src="~/images/daebak_logo.png" alt="Subdivision Logo" class="w-12 h-auto">
        </div>

        <!-- Menu Items -->
        <div class="flex flex-col items-center gap-5">
            <a href="#" class="sidebar-link w-full h-14 flex justify-center items-center text-white text-2xl hover:text-tertiary transition-colors group" data-href="@Url.Action("Dashboard", "Homeowner")" title="Dashboard">
                <i class="ph ph-house-simple"></i>
            </a>
            <a href="#" class="sidebar-link w-full h-14 flex justify-center items-center text-white text-2xl hover:text-tertiary transition-colors group" data-href="@Url.Action("Billing", "Homeowner")" title="Billing & Payments">
                <i class="ph ph-credit-card"></i>
            </a>
            <a href="#" class="sidebar-link w-full h-14 flex justify-center items-center text-white text-2xl hover:text-tertiary transition-colors group" data-href="@Url.Action("Facilities", "Homeowner")" title="Facilities">
                <i class="ph ph-tree-structure"></i>
            </a>
            <a href="#" class="sidebar-link w-full h-14 flex justify-center items-center text-white text-2xl hover:text-tertiary transition-colors group" data-href="@Url.Action("Services", "Homeowner")" title="Services">
                <i class="ph ph-wrench"></i>
            </a>
            <a href="#" class="sidebar-link w-full h-14 flex justify-center items-center text-white text-2xl hover:text-tertiary transition-colors group" data-href="@Url.Action("Security", "Homeowner")" title="Security">
                <i class="ph ph-shield"></i>
            </a>
        </div>

        <!-- User Profile and Logout -->
        <div class="flex flex-col items-center gap-3">
            <a href="#" id="logout-link" class="w-full h-14 flex justify-center items-center text-white text-2xl hover:text-tertiary transition-colors" title="Logout">
                <i class="ph ph-sign-out"></i>
            </a>
        </div>
    </div>

    <!-- Main Content -->
    <div class="ml-20 w-full min-h-screen bg-gradient-to-r from-light to-blue-100">
        <!-- Top Navigation Bar -->
        <div class="bg-white shadow-sm sticky top-0 z-10">
            <div class="max-w-7xl mx-auto px-6 py-3 flex justify-between items-center">
                <div class="text-lg font-medium text-tertiary">My Profile</div>
            </div>
        </div>

        <!-- Success Toast - Non-modal top-right notification -->
        <div id="success-toast" class="fixed top-5 right-5 bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-md shadow-lg transition-all duration-300 transform translate-x-full z-50 flex items-center @(TempData["SuccessMessage"] != null ? "" : "hidden")">
            <i class="ph ph-check-circle text-xl mr-2"></i>
            <p>@TempData["SuccessMessage"]</p>
            <button class="ml-auto pl-4 text-green-700 hover:text-green-900 focus:outline-none" onclick="hideToast()">
                <i class="ph ph-x"></i>
            </button>
        </div>

        <div class="max-w-5xl mx-auto p-6">
            <!-- Tabs Navigation -->
            <div class="mb-6 border-b border-gray-200">
                <ul class="flex flex-wrap -mb-px text-sm font-medium text-center">
                    <li class="mr-2">
                        <a href="#personal-info" class="inline-block p-4 border-b-2 border-secondary text-secondary rounded-t-lg active">
                            <i class="ph ph-user-circle mr-2"></i>Personal Information
                        </a>
                    </li>
                    <li class="mr-2">
                        <a href="#security" class="inline-block p-4 border-b-2 border-transparent hover:text-gray-600 hover:border-gray-300 rounded-t-lg">
                            <i class="ph ph-lock mr-2"></i>Security
                        </a>
                    </li>
                </ul>
            </div>

            <!-- Profile Form -->
            <div class="bg-white rounded-xl shadow-md overflow-hidden">
                <div class="bg-primary/20 p-6">
                    <div class="flex flex-col md:flex-row items-center gap-6">
                        <!-- Replace profile picture with initials -->
                        <div class="w-24 h-24 bg-primary/30 rounded-full flex items-center justify-center text-primary relative">
                            <span class="text-3xl font-semibold">
                                @(Model != null ? $"{Model.FirstName?.FirstOrDefault() ?? '?'}{Model.LastName?.FirstOrDefault() ?? '?'}" : "??")
                            </span>
                        </div>
                        <div>
                            <h1 class="text-2xl font-semibold text-tertiary">@(Model != null ? $"{Model.FirstName} {Model.LastName}" : "User Name")</h1>
                            <p class="text-gray-500">@(Model != null ? Model.Role : "Role") â€¢ Member since @ViewBag.MemberSince</p>
                            <p class="text-gray-500">House #@(Model?.HouseNumber ?? "N/A")</p>
                        </div>
                    </div>
                </div>

                <div class="p-6">
                    <form id="profile-form" asp-action="UpdateProfile" asp-controller="Homeowner" method="post" class="space-y-6">
                        <!-- Personal Information Section -->
                        <div id="personal-info" class="mb-6">
                            <h2 class="text-lg font-medium text-tertiary flex items-center mb-4">
                                <i class="ph ph-user-circle mr-2"></i>
                                Personal Information
                            </h2>

                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <label for="Username" class="block text-sm font-medium text-gray-700 mb-1">Username</label>
                                    <input asp-for="Username" class="form-input w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50">
                                    <span asp-validation-for="Username" class="text-red-500 text-xs"></span>
                                </div>
                                <div>
                                    <label for="Email" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                                    <input asp-for="Email" class="form-input w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50">
                                    <span asp-validation-for="Email" class="text-red-500 text-xs"></span>
                                </div>
                                <div>
                                    <label for="FirstName" class="block text-sm font-medium text-gray-700 mb-1">First Name</label>
                                    <input asp-for="FirstName" class="form-input w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50">
                                    <span asp-validation-for="FirstName" class="text-red-500 text-xs"></span>
                                </div>
                                <div>
                                    <label for="LastName" class="block text-sm font-medium text-gray-700 mb-1">Last Name</label>
                                    <input asp-for="LastName" class="form-input w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50">
                                    <span asp-validation-for="LastName" class="text-red-500 text-xs"></span>
                                </div>
                                <div>
                                    <label for="PhoneNumber" class="block text-sm font-medium text-gray-700 mb-1">Phone Number</label>
                                    <input asp-for="PhoneNumber" class="form-input w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50">
                                    <span asp-validation-for="PhoneNumber" class="text-red-500 text-xs"></span>
                                </div>
                                <div>
                                    <label for="HouseNumber" class="block text-sm font-medium text-gray-700 mb-1">House Number</label>
                                    <input asp-for="HouseNumber" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50">
                                    <span asp-validation-for="HouseNumber" class="text-red-500 text-xs"></span>
                                </div>
                            </div>
                        </div>

                        <!-- Security Settings -->
                        <div id="security" class="border-t pt-6 mt-6">
                            <h2 class="text-lg font-medium text-tertiary flex items-center mb-4">
                                <i class="ph ph-lock mr-2"></i>
                                Change Password
                            </h2>
                            <p class="text-sm text-gray-500 mb-4">Leave blank if you don't want to change your password</p>

                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <label for="CurrentPassword" class="block text-sm font-medium text-gray-700 mb-1">Current Password</label>
                                    <div class="relative">
                                        <input asp-for="CurrentPassword" type="password" class="form-input w-full pl-4 pr-10 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50">
                                        <button type="button" class="toggle-password absolute inset-y-0 right-0 pr-3 flex items-center text-gray-600 cursor-pointer">
                                            <i class="ph ph-eye"></i>
                                        </button>
                                    </div>
                                    <span asp-validation-for="CurrentPassword" class="text-red-500 text-xs"></span>
                                </div>
                                <div></div>
                                <div>
                                    <label for="NewPassword" class="block text-sm font-medium text-gray-700 mb-1">New Password</label>
                                    <div class="relative">
                                        <input asp-for="NewPassword" type="password" class="form-input w-full pl-4 pr-10 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50">
                                        <button type="button" class="toggle-password absolute inset-y-0 right-0 pr-3 flex items-center text-gray-600 cursor-pointer">
                                            <i class="ph ph-eye"></i>
                                        </button>
                                    </div>
                                    <span asp-validation-for="NewPassword" class="text-red-500 text-xs"></span>
                                    <p class="text-xs text-gray-500 mt-1">Minimum 8 characters with at least 1 uppercase letter, 1 number, and 1 special character</p>
                                </div>
                                <div>
                                    <label for="ConfirmNewPassword" class="block text-sm font-medium text-gray-700 mb-1">Confirm New Password</label>
                                    <div class="relative">
                                        <input asp-for="ConfirmNewPassword" type="password" class="form-input w-full pl-4 pr-10 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50">
                                        <button type="button" class="toggle-password absolute inset-y-0 right-0 pr-3 flex items-center text-gray-600 cursor-pointer">
                                            <i class="ph ph-eye"></i>
                                        </button>
                                    </div>
                                    <span asp-validation-for="ConfirmNewPassword" class="text-red-500 text-xs"></span>
                                </div>
                            </div>
                        </div>

                        <div class="border-t pt-6 flex justify-end space-x-4">
                            <button type="button" id="cancel-btn" class="px-6 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50">
                                Cancel
                            </button>
                            <button type="button" id="save-changes-btn" class="px-6 py-2 bg-secondary text-white rounded-md hover:bg-primary opacity-50 cursor-not-allowed" disabled>
                                Save Changes
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Footer with copyright -->
            <div class="text-center mt-10 mb-4 text-sm text-gray-500">
                Â© @DateTime.Now.Year Daebak Subdivision. All rights reserved.
            </div>
        </div>
    </div>

    <!-- Confirmation Modal -->
    <div id="confirmation-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-xl shadow-xl w-full max-w-md overflow-hidden">
            <div class="p-6 border-b border-gray-100">
                <h3 class="font-semibold text-xl text-tertiary">Confirm Changes</h3>
            </div>
            <div class="p-6">
                <p class="text-gray-600 mb-6">Are you sure you want to save these changes to your profile?</p>
                <div class="flex justify-end gap-4">
                    <button id="cancel-changes" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors">
                        Cancel
                    </button>
                    <button id="confirm-changes" class="px-4 py-2 bg-secondary text-white rounded-md hover:bg-blue-600 transition-colors">
                        Yes, Save Changes
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Discard Changes Modal -->
    <div id="discard-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-xl shadow-xl w-full max-w-md overflow-hidden">
            <div class="p-6 border-b border-gray-100">
                <h3 class="font-semibold text-xl text-tertiary">Discard Changes?</h3>
            </div>
            <div class="p-6">
                <p class="text-gray-600 mb-6">You have unsaved changes. Are you sure you want to discard them?</p>
                <div class="flex justify-end gap-4">
                    <button id="keep-editing" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors">
                        Keep Editing
                    </button>
                    <button id="discard-changes" class="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors">
                        Discard Changes
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Logout Confirmation Modal -->
    <div id="logout-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-xl shadow-xl w-full max-w-md overflow-hidden">
            <div class="p-6 border-b border-gray-100">
                <h3 class="font-semibold text-xl text-tertiary">Confirm Logout</h3>
            </div>
            <div class="p-6">
                <p class="text-gray-600 mb-6">Are you sure you want to logout?</p>
                <div class="flex justify-end gap-4">
                    <button id="cancel-logout" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors">
                        Cancel
                    </button>
                    <button id="confirm-logout" class="px-4 py-2 bg-primary text-white rounded-md hover:bg-blue-600 transition-colors">
                        Yes, Logout
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- JavaScript for form functionality -->
    <script>
        // Function to completely hide the toast notification
        function hideToast() {
            const successToast = document.getElementById('success-toast');
            successToast.classList.add('translate-x-full');

            // After animation completes, add the hidden class (reduced to 100ms from 300ms)
            setTimeout(() => {
                successToast.classList.add('hidden');
                // Ensure the element is completely removed from the layout
                successToast.style.display = 'none';
            }, 100);
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Get form elements
            const profileForm = document.getElementById('profile-form');
            const formInputs = document.querySelectorAll('.form-input');
            const saveChangesBtn = document.getElementById('save-changes-btn');
            const cancelBtn = document.getElementById('cancel-btn');
            const confirmationModal = document.getElementById('confirmation-modal');
            const cancelChanges = document.getElementById('cancel-changes');
            const confirmChanges = document.getElementById('confirm-changes');
            const discardModal = document.getElementById('discard-modal');
            const keepEditing = document.getElementById('keep-editing');
            const discardChanges = document.getElementById('discard-changes');
            const sidebarLinks = document.querySelectorAll('.sidebar-link');
            const logoutLink = document.getElementById('logout-link');
            const logoutModal = document.getElementById('logout-modal');
            const cancelLogout = document.getElementById('cancel-logout');
            const confirmLogout = document.getElementById('confirm-logout');

            // Store original form values
            const originalValues = {};
            formInputs.forEach(input => {
                originalValues[input.id] = input.value;
            });

            // Track form changes
            let hasChanges = false;
            let pendingRedirect = null;

            // Function to check if form has been modified
            function checkFormChanges() {
                let changed = false;
                formInputs.forEach(input => {
                    if (input.value !== originalValues[input.id]) {
                        changed = true;
                    }
                });

                hasChanges = changed;

                // Enable/disable save button based on changes
                if (changed) {
                    saveChangesBtn.classList.remove('opacity-50', 'cursor-not-allowed');
                    saveChangesBtn.disabled = false;
                } else {
                    saveChangesBtn.classList.add('opacity-50', 'cursor-not-allowed');
                    saveChangesBtn.disabled = true;
                }
            }

            // Add event listeners to all form inputs
            formInputs.forEach(input => {
                input.addEventListener('input', checkFormChanges);
            });

            // Show confirmation modal when trying to save with changes
            saveChangesBtn.addEventListener('click', function() {
                if (hasChanges) {
                    confirmationModal.classList.remove('hidden');
                    document.body.style.overflow = 'hidden';
                }
            });

            // Hide modal when clicking cancel in confirmation dialog
            cancelChanges.addEventListener('click', function() {
                confirmationModal.classList.add('hidden');
                document.body.style.overflow = '';
            });

            // Submit form when confirming changes
            confirmChanges.addEventListener('click', function() {
                profileForm.submit();
            });

            // Handle cancel button click - show discard dialog if changes exist
            cancelBtn.addEventListener('click', function() {
                if (hasChanges) {
                    discardModal.classList.remove('hidden');
                    document.body.style.overflow = 'hidden';
                    pendingRedirect = '@Url.Action("Dashboard", "Homeowner")';
                } else {
                    // No changes, just redirect
                    window.location.href = '@Url.Action("Dashboard", "Homeowner")';
                }
            });

            // Keep editing when clicking that button in discard dialog
            keepEditing.addEventListener('click', function() {
                discardModal.classList.add('hidden');
                document.body.style.overflow = '';
                pendingRedirect = null;
            });

            // Discard changes and redirect
            discardChanges.addEventListener('click', function() {
                if (pendingRedirect) {
                    window.location.href = pendingRedirect;
                }
            });

            // Close modals when clicking outside
            document.addEventListener('click', function(e) {
                if (e.target === confirmationModal) {
                    confirmationModal.classList.add('hidden');
                    document.body.style.overflow = '';
                }
                if (e.target === discardModal) {
                    discardModal.classList.add('hidden');
                    document.body.style.overflow = '';
                    pendingRedirect = null;
                }
                if (e.target === logoutModal) {
                    logoutModal.classList.add('hidden');
                    document.body.style.overflow = '';
                }
            });

            // Close modals with escape key
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    if (!confirmationModal.classList.contains('hidden')) {
                        confirmationModal.classList.add('hidden');
                        document.body.style.overflow = '';
                    }
                    if (!discardModal.classList.contains('hidden')) {
                        discardModal.classList.add('hidden');
                        document.body.style.overflow = '';
                        pendingRedirect = null;
                    }
                    if (!logoutModal.classList.contains('hidden')) {
                        logoutModal.classList.add('hidden');
                        document.body.style.overflow = '';
                    }
                }
            });

            // Tab Navigation
            const tabLinks = document.querySelectorAll('a[href^="#"]');
            tabLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();

                    // Remove active state from all tabs
                    tabLinks.forEach(tab => {
                        tab.classList.remove('border-secondary', 'text-secondary');
                        tab.classList.add('border-transparent', 'hover:text-gray-600', 'hover:border-gray-300');
                    });

                    // Add active state to clicked tab
                    this.classList.add('border-secondary', 'text-secondary');
                    this.classList.remove('border-transparent', 'hover:text-gray-600', 'hover:border-gray-300');

                    // Get the target tab content id
                    const targetId = this.getAttribute('href').substring(1);

                    // Show target tab content by scrolling to it
                    document.getElementById(targetId).scrollIntoView({
                        behavior: 'smooth'
                    });
                });
            });

            // Display toast notification if success message exists
            const successToast = document.getElementById('success-toast');
            if (successToast && !successToast.classList.contains('hidden')) {
                // Show the toast
                setTimeout(() => {
                    successToast.classList.remove('translate-x-full');
                }, 100);

                // Hide after 3 seconds (reduced from 5 seconds)
                setTimeout(() => {
                    hideToast();
                }, 3000);
            }

            // Handle sidebar link clicks
            sidebarLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const targetHref = this.getAttribute('data-href');

                    if (hasChanges) {
                        // Show the discard changes dialog
                        pendingRedirect = targetHref;
                        discardModal.classList.remove('hidden');
                        document.body.style.overflow = 'hidden';
                    } else {
                        // No changes, just navigate
                        window.location.href = targetHref;
                    }
                });
            });

            // Automatically scroll to validation errors if any exist
            const errorElements = document.querySelectorAll('.text-red-500');
            if (errorElements.length > 0) {
                // Find if there are any password field errors
                let hasPasswordErrors = false;
                let firstErrorInput = null;
                let firstErrorElement = null;

                // Check each error element
                errorElements.forEach(errorElement => {
                    // Only process non-empty error messages
                    if (errorElement.textContent && errorElement.textContent.trim() !== '') {
                        const fieldId = errorElement.getAttribute('data-valmsg-for') ||
                                      errorElement.previousElementSibling?.id;

                        // If this is the first error we've found, remember it
                        if (!firstErrorElement) {
                            firstErrorElement = errorElement;
                            firstErrorInput = errorElement.previousElementSibling;
                        }

                        // Check if this is a password field error
                        if (fieldId === 'CurrentPassword' || fieldId === 'NewPassword' ||
                            fieldId === 'ConfirmNewPassword' ||
                            errorElement.previousElementSibling?.id === 'CurrentPassword' ||
                            errorElement.previousElementSibling?.id === 'NewPassword' ||
                            errorElement.previousElementSibling?.id === 'ConfirmNewPassword') {

                            hasPasswordErrors = true;

                            // If we found a password error, switch to security tab first
                            const securityTabLink = document.querySelector('a[href="#security"]');
                            if (securityTabLink) {
                                securityTabLink.click();

                                // Focus and scroll to the specific password field with error
                                setTimeout(() => {
                                    const inputWithError = errorElement.previousElementSibling;
                                    if (inputWithError) {
                                        inputWithError.focus();
                                        inputWithError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                    }
                                }, 300); // Increased delay to ensure tab switch completes first

                                return; // Exit the forEach since we've handled the password error
                            }
                        }
                    }
                });

                // If no password errors but other errors exist, focus on the first error
                if (!hasPasswordErrors && firstErrorInput) {
                    setTimeout(() => {
                        firstErrorInput.focus();
                        firstErrorInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }, 200);
                }
            }

            // Handle password visibility toggle
            const toggleButtons = document.querySelectorAll('.toggle-password');
            toggleButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const input = this.previousElementSibling;
                    const icon = this.querySelector('i');

                    // Toggle password visibility
                    if (input.type === 'password') {
                        input.type = 'text';
                        icon.classList.remove('ph-eye');
                        icon.classList.add('ph-eye-slash');
                    } else {
                        input.type = 'password';
                        icon.classList.remove('ph-eye-slash');
                        icon.classList.add('ph-eye');
                    }
                });
            });

            // Show logout confirmation modal
            logoutLink.addEventListener('click', function(e) {
                e.preventDefault();
                logoutModal.classList.remove('hidden');
                document.body.style.overflow = 'hidden';
            });

            // Hide logout modal when clicking cancel
            cancelLogout.addEventListener('click', function() {
                logoutModal.classList.add('hidden');
                document.body.style.overflow = '';
            });

            // Confirm logout
            confirmLogout.addEventListener('click', function() {
                window.location.href = '@Url.Action("Logout", "Account")';
            });
        });
    </script>
</body>
</html>