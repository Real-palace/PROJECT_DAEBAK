@model daebak_subdivision_website.Models.AdminPageModel
@{
    ViewData["Title"] = "Create User";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var userViewModel = ViewData["UserViewModel"] as daebak_subdivision_website.Models.UserViewModel ?? new daebak_subdivision_website.Models.UserViewModel();
}

<!-- Create User Form Section -->
<div class="p-6">
    <div class="flex items-center mb-6">
        <a href="@Url.Action("Index", "UserManagement")" class="mr-3 text-gray-500 hover:text-gray-700">
            <i class="ph ph-arrow-left text-lg"></i>
        </a>
        <h2 class="text-2xl font-semibold text-gray-800">Create New User</h2>
    </div>

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded" role="alert">
            <div class="flex">
                <div class="flex-shrink-0">
                    <i class="ph ph-warning-circle text-xl mr-2"></i>
                </div>
                <div>
                    <p class="font-bold">Please correct the following errors:</p>
                    <ul class="text-sm list-disc list-inside">
                        @foreach (var key in ViewData.ModelState.Keys)
                        {
                            if (ViewData.ModelState[key]?.Errors != null)
                            {
                                foreach (var error in ViewData.ModelState[key].Errors)
                                {
                                    <li>@error.ErrorMessage</li>
                                }
                            }
                        }
                    </ul>
                </div>
            </div>
        </div>
    }

    <div class="bg-white p-6 rounded-xl shadow-md">
        <form asp-action="Create" method="post">
            @Html.AntiForgeryToken()

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <!-- Left Column -->
                <div class="space-y-6">
                    <h3 class="font-medium text-gray-700 border-b pb-2">User Information</h3>

                    <!-- First Name -->
                    <div>
                        <label for="FirstName" class="block text-sm font-medium text-gray-700 mb-1">First Name <span class="text-red-500">*</span></label>
                        <input type="text" id="FirstName" name="FirstName" value="@userViewModel.FirstName" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary" required>
                        @if (ViewData.ModelState["FirstName"]?.Errors.Count > 0)
                        {
                            <span class="text-xs text-red-600">@ViewData.ModelState["FirstName"].Errors[0].ErrorMessage</span>
                        }
                    </div>

                    <!-- Last Name -->
                    <div>
                        <label for="LastName" class="block text-sm font-medium text-gray-700 mb-1">Last Name <span class="text-red-500">*</span></label>
                        <input type="text" id="LastName" name="LastName" value="@userViewModel.LastName" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary" required>
                        @if (ViewData.ModelState["LastName"]?.Errors.Count > 0)
                        {
                            <span class="text-xs text-red-600">@ViewData.ModelState["LastName"].Errors[0].ErrorMessage</span>
                        }
                    </div>

                    <!-- Email -->
                    <div>
                        <label for="Email" class="block text-sm font-medium text-gray-700 mb-1">Email <span class="text-red-500">*</span></label>
                        <input type="email" id="Email" name="Email" value="@userViewModel.Email" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary" required>
                        @if (ViewData.ModelState["Email"]?.Errors.Count > 0)
                        {
                            <span class="text-xs text-red-600">@ViewData.ModelState["Email"].Errors[0].ErrorMessage</span>
                        }
                    </div>

                    <!-- Phone Number -->
                    <div>
                        <label for="PhoneNumber" class="block text-sm font-medium text-gray-700 mb-1">Phone Number</label>
                        <input type="text" id="PhoneNumber" name="PhoneNumber" value="@userViewModel.PhoneNumber" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary">
                        @if (ViewData.ModelState["PhoneNumber"]?.Errors.Count > 0)
                        {
                            <span class="text-xs text-red-600">@ViewData.ModelState["PhoneNumber"].Errors[0].ErrorMessage</span>
                        }
                    </div>

                    <!-- House Number (only applicable if homeowner) -->
                    <div id="houseNumberField">
                        <label for="HouseNumber" class="block text-sm font-medium text-gray-700 mb-1">House Number</label>
                        <input type="text" id="HouseNumber" name="HouseNumber" value="@userViewModel.HouseNumber" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary">
                        @if (ViewData.ModelState["HouseNumber"]?.Errors.Count > 0)
                        {
                            <span class="text-xs text-red-600">@ViewData.ModelState["HouseNumber"].Errors[0].ErrorMessage</span>
                        }
                        <p class="text-xs text-gray-500 mt-1">Required for homeowners only</p>
                    </div>

                    <!-- Department (only applicable if staff) -->
                    <div id="departmentField">
                        <label for="Department" class="block text-sm font-medium text-gray-700 mb-1">Department</label>
                        <select id="Department" name="Department" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary">
                            <option value="">-- Select Department --</option>
                            @{
                                var departments = new[]
                                {
                            new { Value = "SECURITY", Text = "Security" },
                            new { Value = "MAINT", Text = "Maintenance" },
                            new { Value = "GARDEN", Text = "Gardening" },
                            new { Value = "FACILITY", Text = "Facility" },
                            new { Value = "FINANCE", Text = "Finance" },
                            new { Value = "OTHER", Text = "Other" }
                            };

                                foreach (var dept in departments)
                                {
                                    if (userViewModel.Department == dept.Value)
                                    {
                                        <option value="@dept.Value" selected>@dept.Text</option>
                                    }
                                    else
                                    {
                                        <option value="@dept.Value">@dept.Text</option>
                                    }
                                }
                            }
                        </select>
                        @if (ViewData.ModelState["Department"]?.Errors.Count > 0)
                        {
                            <span class="text-xs text-red-600">@ViewData.ModelState["Department"].Errors[0].ErrorMessage</span>
                        }
                        <p class="text-xs text-gray-500 mt-1">Required for staff members only</p>
                    </div>
                </div>

                <!-- Right Column -->
                <div class="space-y-6">
                    <h3 class="font-medium text-gray-700 border-b pb-2">Account Details</h3>

                    <!-- Username -->
                    <div>
                        <label for="Username" class="block text-sm font-medium text-gray-700 mb-1">Username <span class="text-red-500">*</span></label>
                        <input type="text" id="Username" name="Username" value="@userViewModel.Username" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary" required>
                        @if (ViewData.ModelState["Username"]?.Errors.Count > 0)
                        {
                            <span class="text-xs text-red-600">@ViewData.ModelState["Username"].Errors[0].ErrorMessage</span>
                        }
                    </div>

                    <!-- Role -->
                    <div>
                        <label for="Role" class="block text-sm font-medium text-gray-700 mb-1">Role <span class="text-red-500">*</span></label>
                        <select id="roleSelect" name="Role" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary" required>
                            <option value="">-- Select Role --</option>
                            @{
                                var roles = new[]
                                {
                            new { Value = "ADMIN", Text = "Administrator" },
                            new { Value = "HOMEOWNER", Text = "Homeowner" },
                            new { Value = "STAFF", Text = "Staff" }
                            };

                                foreach (var role in roles)
                                {
                                    if (userViewModel.Role == role.Value)
                                    {
                                        <option value="@role.Value" selected>@role.Text</option>
                                    }
                                    else
                                    {
                                        <option value="@role.Value">@role.Text</option>
                                    }
                                }
                            }
                        </select>
                        @if (ViewData.ModelState["Role"]?.Errors.Count > 0)
                        {
                            <span class="text-xs text-red-600">@ViewData.ModelState["Role"].Errors[0].ErrorMessage</span>
                        }
                    </div>

                    <!-- Password -->
                    <div>
                        <label for="Password" class="block text-sm font-medium text-gray-700 mb-1">Password <span class="text-red-500">*</span></label>
                        <div class="relative">
                            <input type="password" id="password" name="Password" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary" required>
                            <button type="button" id="togglePassword" class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-500">
                                <i class="ph ph-eye"></i>
                            </button>
                        </div>
                        @if (ViewData.ModelState["Password"]?.Errors.Count > 0)
                        {
                            <span class="text-xs text-red-600">@ViewData.ModelState["Password"].Errors[0].ErrorMessage</span>
                        }
                        <p class="text-xs text-gray-500 mt-1">Password must be at least 8 characters with at least 1 uppercase letter, 1 number, and 1 special character</p>
                    </div>

                    <!-- Confirm Password -->
                    <div>
                        <label for="ConfirmPassword" class="block text-sm font-medium text-gray-700 mb-1">Confirm Password <span class="text-red-500">*</span></label>
                        <div class="relative">
                            <input type="password" id="confirmPassword" name="ConfirmPassword" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary" required>
                            <button type="button" id="toggleConfirmPassword" class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-500">
                                <i class="ph ph-eye"></i>
                            </button>
                        </div>
                        @if (ViewData.ModelState["ConfirmPassword"]?.Errors.Count > 0)
                        {
                            <span class="text-xs text-red-600">@ViewData.ModelState["ConfirmPassword"].Errors[0].ErrorMessage</span>
                        }
                    </div>
                </div>
            </div>

            <!-- Submit Button -->
            <div class="mt-8 flex justify-end">
                <button type="button" class="mr-3 px-5 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50" onclick="window.location.href='@Url.Action("Index", "UserManagement")'">
                    Cancel
                </button>
                <button type="submit" class="px-5 py-2 bg-secondary text-white rounded-md hover:bg-secondary/80 transition-colors">
                    Create User
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Show/Hide house number field based on role
            const roleSelect = document.getElementById('roleSelect');
            const houseNumberField = document.getElementById('houseNumberField');
            const departmentField = document.getElementById('departmentField');

            // Initial state - hide house number field if role is not homeowner
            if (roleSelect.value !== 'HOMEOWNER') {
                houseNumberField.style.display = 'none';
            }

            // Initial state - hide department field if role is not staff
            if (roleSelect.value !== 'STAFF') {
                departmentField.style.display = 'none';
            }

            roleSelect.addEventListener('change', function() {
                if (this.value === 'HOMEOWNER') {
                    houseNumberField.style.display = 'block';
                    document.getElementById('HouseNumber').setAttribute('required', 'required');
                } else {
                    houseNumberField.style.display = 'none';
                    document.getElementById('HouseNumber').removeAttribute('required');
                }

                if (this.value === 'STAFF') {
                    departmentField.style.display = 'block';
                    document.getElementById('Department').setAttribute('required', 'required');
                } else {
                    departmentField.style.display = 'none';
                    document.getElementById('Department').removeAttribute('required');
                }
            });

            // Toggle password visibility
            const togglePassword = document.getElementById('togglePassword');
            const password = document.getElementById('password');

            togglePassword.addEventListener('click', function() {
                const type = password.getAttribute('type') === 'password' ? 'text' : 'password';
                password.setAttribute('type', type);
                this.querySelector('i').className = type === 'password' ? 'ph ph-eye' : 'ph ph-eye-slash';
            });

            // Toggle confirm password visibility
            const toggleConfirmPassword = document.getElementById('toggleConfirmPassword');
            const confirmPassword = document.getElementById('confirmPassword');

            toggleConfirmPassword.addEventListener('click', function() {
                const type = confirmPassword.getAttribute('type') === 'password' ? 'text' : 'password';
                confirmPassword.setAttribute('type', type);
                this.querySelector('i').className = type === 'password' ? 'ph ph-eye' : 'ph ph-eye-slash';
            });
        });
    </script>
}