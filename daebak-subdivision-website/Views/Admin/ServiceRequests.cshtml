@{
    ViewData["Title"] = "Service Requests Management";
    Layout = "_AdminLayout";
}

<!-- Page Header -->
<div class="bg-white rounded-xl shadow-sm p-6 mb-6">
    <div class="flex items-center">
        <div class="flex-shrink-0 mr-4">
            <div class="bg-primary/10 p-3 rounded-full">
                <i class="ph ph-wrench text-3xl text-primary"></i>
            </div>
        </div>
        <div>
            <h2 class="text-xl font-semibold text-gray-800">Service Requests Management</h2>
            <p class="text-gray-600 mt-1">Real-time management of homeowner maintenance and security requests</p>
        </div>
    </div>
</div>

<div class="container mx-auto">
    <div class="mb-6 flex justify-between items-center">
        <h1 class="text-2xl font-semibold text-secondary">Service Requests Management</h1>
        <div>
            <button id="btnFilterRequests" class="bg-primary hover:bg-secondary text-white px-4 py-2 rounded-lg flex items-center gap-2 transition">
                <i class="ph ph-funnel"></i>
                <span>Filter</span>
            </button>
        </div>
    </div>

    <!-- Service Stats Cards -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <div class="bg-white rounded-lg shadow-sm p-4 border-l-4 border-blue-500">
            <div class="flex justify-between items-start">
                <div>
                    <p class="text-sm text-gray-500">Total Requests</p>
                    <h3 class="text-2xl font-semibold" id="totalRequestsCount">0</h3>
                </div>
                <div class="bg-blue-100 rounded-full p-2">
                    <i class="ph ph-note text-blue-500 text-xl"></i>
                </div>
            </div>
        </div>
        <div class="bg-white rounded-lg shadow-sm p-4 border-l-4 border-yellow-500">
            <div class="flex justify-between items-start">
                <div>
                    <p class="text-sm text-gray-500">Pending</p>
                    <h3 class="text-2xl font-semibold" id="pendingRequestsCount">0</h3>
                </div>
                <div class="bg-yellow-100 rounded-full p-2">
                    <i class="ph ph-clock text-yellow-500 text-xl"></i>
                </div>
            </div>
        </div>
        <div class="bg-white rounded-lg shadow-sm p-4 border-l-4 border-green-500">
            <div class="flex justify-between items-start">
                <div>
                    <p class="text-sm text-gray-500">Completed</p>
                    <h3 class="text-2xl font-semibold" id="completedRequestsCount">0</h3>
                </div>
                <div class="bg-green-100 rounded-full p-2">
                    <i class="ph ph-check-circle text-green-500 text-xl"></i>
                </div>
            </div>
        </div>
        <div class="bg-white rounded-lg shadow-sm p-4 border-l-4 border-red-500">
            <div class="flex justify-between items-start">
                <div>
                    <p class="text-sm text-gray-500">Canceled</p>
                    <h3 class="text-2xl font-semibold" id="canceledRequestsCount">0</h3>
                </div>
                <div class="bg-red-100 rounded-full p-2">
                    <i class="ph ph-x-circle text-red-500 text-xl"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Service Requests Table -->
    <div class="bg-white rounded-lg shadow-sm overflow-hidden">
        <div class="p-4 border-b border-gray-200">
            <h2 class="text-lg font-medium text-gray-800">Service Requests</h2>
        </div>
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Request ID</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Homeowner</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Service Type</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date Submitted</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Action</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200" id="serviceRequestsTableBody">
                    <!-- Table rows will be populated dynamically -->
                </tbody>
            </table>
        </div>
        <div id="noRequests" class="p-8 text-center hidden">
            <i class="ph ph-note-pencil text-4xl text-gray-400"></i>
            <p class="mt-2 text-gray-500">No service requests found.</p>
        </div>
        <div class="p-4 border-t border-gray-200 flex justify-between items-center">
            <div class="text-sm text-gray-500">
                Showing <span id="currentCount">0</span> of <span id="totalCount">0</span> requests
            </div>
            <div class="flex gap-2">
                <button id="prevPage" class="px-3 py-1 rounded bg-gray-100 text-gray-700 disabled:opacity-50">
                    <i class="ph ph-caret-left"></i>
                </button>
                <button id="nextPage" class="px-3 py-1 rounded bg-gray-100 text-gray-700 disabled:opacity-50">
                    <i class="ph ph-caret-right"></i>
                </button>
            </div>
        </div>
    </div>
</div>

@section Modals {
    <!-- View Request Details Modal -->
    <div id="requestDetailsModal" class="fixed inset-0 bg-gray-900 bg-opacity-50 z-50 flex items-center justify-center hidden">
        <div class="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div class="border-b border-gray-200 p-4 flex justify-between items-center sticky top-0 bg-white">
                <h3 class="text-lg font-medium text-gray-900">Service Request Details</h3>
                <button class="text-gray-400 hover:text-gray-500" onclick="closeRequestDetailsModal()">
                    <i class="ph ph-x text-xl"></i>
                </button>
            </div>
            <div class="p-6">                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                    <div>
                        <h4 class="text-sm text-gray-500">Request ID</h4>
                        <p class="font-medium" id="detailsRequestId">-</p>
                    </div>
                    <div>
                        <h4 class="text-sm text-gray-500">Submission Date</h4>
                        <p class="font-medium" id="detailsSubmissionDate">-</p>
                    </div>
                    <div>
                        <h4 class="text-sm text-gray-500">Status</h4>
                        <p class="font-medium" id="detailsStatus">-</p>
                    </div>
                    <div>
                        <h4 class="text-sm text-gray-500">Service Type</h4>
                        <p class="font-medium" id="detailsServiceType">-</p>
                    </div>
                    <div class="md:col-span-2">
                        <h4 class="text-sm text-gray-500">Homeowner</h4>
                        <p class="font-medium" id="detailsHomeowner">-</p>
                    </div>
                    <div class="md:col-span-2">
                        <h4 class="text-sm text-gray-500">Location</h4>
                        <p class="font-medium" id="detailsLocation">-</p>
                    </div>
                </div>

                <div class="mb-4">
                    <h4 class="text-sm text-gray-500 mb-1">Description</h4>
                    <div class="p-3 bg-gray-50 rounded-lg" id="detailsDescription">-</div>
                </div>

                <div class="mb-4" id="pictureAttachmentSection">
                    <h4 class="text-sm text-gray-500 mb-2">Attachments</h4>
                    <div class="grid grid-cols-2 md:grid-cols-3 gap-3" id="detailsAttachments">
                        <!-- Images will be populated here -->
                    </div>
                </div>

                <div class="border-t border-gray-200 pt-4 mt-4" id="adminResponseSection">
                    <h4 class="text-sm font-medium text-gray-700 mb-2">Admin Response</h4>
                    <textarea id="adminResponseText" class="w-full border border-gray-300 rounded-lg p-3 h-24" placeholder="Enter response to the homeowner..."></textarea>
                </div>                <div class="flex justify-between items-center mt-6">
                    <div>
                        <select id="statusUpdate" class="border border-gray-300 rounded-lg px-3 py-2">
                            <option value="Open">Open</option>
                            <option value="In Progress">In Progress</option>
                            <option value="Scheduled">Scheduled</option>
                            <option value="Completed">Completed</option>
                            <option value="Cancelled">Cancelled</option>
                        </select>
                    </div>
                    <div class="flex gap-3">
                        <button id="btnDeleteRequest" class="px-4 py-2 border border-red-500 text-red-500 rounded-lg hover:bg-red-50">
                            Delete Request
                        </button>
                        <button id="btnUpdateRequest" class="px-4 py-2 bg-secondary text-white rounded-lg hover:bg-secondary/90">
                            Save Changes
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filter Modal -->
    <div id="filterModal" class="fixed inset-0 bg-gray-900 bg-opacity-50 z-50 flex items-center justify-center hidden">
        <div class="bg-white rounded-lg max-w-md w-full">
            <div class="border-b border-gray-200 p-4 flex justify-between items-center">
                <h3 class="text-lg font-medium text-gray-900">Filter Requests</h3>
                <button class="text-gray-400 hover:text-gray-500" onclick="closeFilterModal()">
                    <i class="ph ph-x text-xl"></i>
                </button>
            </div>
            <div class="p-6">
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Status</label>                    <select id="filterStatus" class="w-full border border-gray-300 rounded-lg px-3 py-2">
                        <option value="">All Statuses</option>
                        <option value="Open">Open</option>
                        <option value="In Progress">In Progress</option>
                        <option value="Scheduled">Scheduled</option>
                        <option value="Completed">Completed</option>
                        <option value="Cancelled">Cancelled</option>
                    </select>
                </div>
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Service Type</label>
                    <select id="filterServiceType" class="w-full border border-gray-300 rounded-lg px-3 py-2">
                        <option value="">All Types</option>
                        <option value="Plumbing">Plumbing</option>
                        <option value="Electrical">Electrical</option>
                        <option value="HVAC">HVAC</option>
                        <option value="Landscaping">Landscaping</option>
                        <option value="Security">Security</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Date Range</label>
                    <div class="grid grid-cols-2 gap-3">
                        <input type="date" id="filterStartDate" class="border border-gray-300 rounded-lg px-3 py-2">
                        <input type="date" id="filterEndDate" class="border border-gray-300 rounded-lg px-3 py-2">
                    </div>
                </div>
                <div class="flex justify-end gap-3 mt-6">
                    <button onclick="resetFilters()" class="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50">
                        Reset
                    </button>
                    <button onclick="applyFilters()" class="px-4 py-2 bg-secondary text-white rounded-lg hover:bg-secondary/90">
                        Apply Filters
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Confirmation Modal -->
    <div id="confirmationModal" class="fixed inset-0 bg-gray-900 bg-opacity-50 z-50 flex items-center justify-center hidden">
        <div class="bg-white rounded-lg max-w-md w-full p-6">
            <h3 class="text-lg font-medium text-gray-900 mb-4" id="confirmationTitle">Confirmation</h3>
            <p class="text-gray-500 mb-5" id="confirmationMessage">Are you sure you want to proceed with this action?</p>
            <div class="flex justify-end gap-3">
                <button id="cancelConfirmation" class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200">
                    Cancel
                </button>
                <button id="confirmAction" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700">
                    Confirm
                </button>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        // Load service requests and stats when the page loads
        document.addEventListener('DOMContentLoaded', function() {
            loadServiceRequests();
            loadServiceRequestStats();
        });

        // Function to load service requests
        function loadServiceRequests() {
            fetch('/Admin/ServiceRequests/GetAll')
                .then(response => response.json())
                .then(requests => {
                    const tableBody = document.getElementById('serviceRequestsTableBody');
                    tableBody.innerHTML = '';

                    if (requests.length === 0) {
                        document.getElementById('noRequests').classList.remove('hidden');
                        document.getElementById('currentCount').textContent = '0';
                        document.getElementById('totalCount').textContent = '0';
                        return;
                    }

                    document.getElementById('noRequests').classList.add('hidden');
                    document.getElementById('currentCount').textContent = requests.length;
                    document.getElementById('totalCount').textContent = requests.length;

                    requests.forEach(request => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="text-sm text-gray-900">#SR-${request.id}</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="text-sm text-gray-900">${request.requestedBy}</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="flex items-center">
                                    <i class="ph ${request.requestType === 'Maintenance' ? 'ph-hammer' : 'ph-shield-warning'} text-secondary mr-2"></i>
                                    <div class="text-sm font-medium text-gray-900">${request.requestType}</div>
                                </div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                ${new Date(request.createdAt).toLocaleDateString()}
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusClass(request.status)}">
                                    ${request.status}
                                </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                <button onclick="viewRequestDetails(${request.id})" class="text-secondary hover:text-secondary/80">
                                    View Details
                                </button>
                            </td>
                        `;
                        tableBody.appendChild(row);
                    });
                })
                .catch(error => {
                    console.error('Error loading service requests:', error);
                    document.getElementById('serviceRequestsTableBody').innerHTML = `
                        <tr>
                            <td colspan="6" class="px-6 py-4 text-center text-red-500">
                                Error loading service requests. Please try again later.
                            </td>
                        </tr>
                    `;
                });
        }

        // Function to load service request stats
        function loadServiceRequestStats() {
            fetch('/Admin/ServiceRequests/GetStats')
                .then(response => response.json())
                .then(stats => {
                    document.getElementById('totalRequestsCount').textContent = stats.total;
                    document.getElementById('pendingRequestsCount').textContent = stats.pending;
                    document.getElementById('completedRequestsCount').textContent = stats.completed;
                    document.getElementById('canceledRequestsCount').textContent = stats.canceled;
                })
                .catch(error => {
                    console.error('Error loading stats:', error);
                });
        }        // Function to get status class for styling
        function getStatusClass(status) {
            switch (status) {
                case 'Open':
                    return 'bg-yellow-100 text-yellow-800';
                case 'In Progress':
                    return 'bg-indigo-100 text-indigo-800';
                case 'Scheduled':
                    return 'bg-purple-100 text-purple-800';
                case 'Completed':
                    return 'bg-green-100 text-green-800';
                case 'Cancelled':
                    return 'bg-red-100 text-red-800';
                default:
                    return 'bg-gray-100 text-gray-800';
            }
        }// Function to view request details
        function viewRequestDetails(requestId) {
            const modal = document.getElementById('requestDetailsModal');
            modal.classList.remove('hidden');
              // First find the request in the table to get the homeowner name
            const requestRow = Array.from(document.querySelectorAll('#serviceRequestsTableBody tr'))
                .find(row => row.querySelector('td:first-child').textContent.includes(requestId.toString()));
            
            let homeownerName = '-';
            if (requestRow) {
                homeownerName = requestRow.querySelector('td:nth-child(2) div').textContent.trim();
            }
            
            // Fetch detailed request information from the API
            fetch(`/ServiceRequests/GetDetails/${requestId}`)
                .then(response => response.json())
                .then(request => {
                    document.getElementById('detailsRequestId').textContent = `#SR-${request.id}`;
                    // Use the homeowner name from the table since it's missing in the details API
                    document.getElementById('detailsHomeowner').textContent = homeownerName;
                    document.getElementById('detailsServiceType').textContent = request.requestType || '-';
                    document.getElementById('detailsSubmissionDate').textContent = new Date(request.createdAt).toLocaleDateString();
                    document.getElementById('detailsStatus').textContent = request.status || '-';
                    document.getElementById('detailsLocation').textContent = request.location || '-';
                    
                    // Set the description
                    document.getElementById('detailsDescription').textContent = request.description || '-';
                    
                    // Set the current status in the dropdown
                    document.getElementById('statusUpdate').value = request.status || '';
                    
                    // Set the admin response/staff notes if available
                    if (request.staffNotes) {
                        document.getElementById('adminResponseText').value = request.staffNotes;
                    } else {
                        document.getElementById('adminResponseText').value = '';
                    }
                    
                    // Handle attachments/images
                    const attachmentsContainer = document.getElementById('detailsAttachments');
                    attachmentsContainer.innerHTML = '';

                    // Debug what's coming from the server
                    console.log('Request image data:', request.images || request.imageUrls);

                    if (request.images && request.images.length > 0) {
                        request.images.forEach(image => {
                            const imgContainer = document.createElement('div');
                            imgContainer.className = 'relative';
                            
                            // Handle different possible image object structures
                            const imgSrc = typeof image === 'string' 
                                ? image 
                                : image.imagePath || image.path || image.url || '';
                            
                            if (!imgSrc) {
                                console.warn('Could not determine image source from:', image);
                                return;
                            }
                            
                            const img = document.createElement('img');
                            img.src = imgSrc;
                            img.alt = 'Request Attachment';
                            img.className = 'rounded-lg w-full h-32 object-cover cursor-pointer';
                            img.onclick = function() {
                                window.open(imgSrc, '_blank');
                            };
                            
                            // Add download button
                            const downloadBtn = document.createElement('button');
                            downloadBtn.className = 'absolute bottom-2 right-2 bg-white bg-opacity-75 rounded-full p-1 hover:bg-opacity-100 transition';
                            downloadBtn.innerHTML = '<i class="ph ph-download text-gray-700"></i>';
                            downloadBtn.onclick = function(e) {
                                e.stopPropagation();
                                const a = document.createElement('a');
                                a.href = imgSrc;
                                a.download = `request-${request.id}-attachment`;
                                document.body.appendChild(a);
                                a.click();
                                document.body.removeChild(a);
                            };
                            
                            imgContainer.appendChild(img);
                            imgContainer.appendChild(downloadBtn);
                            attachmentsContainer.appendChild(imgContainer);
                        });
                        document.getElementById('pictureAttachmentSection').style.display = 'block';
                    } else if (request.imageUrls && request.imageUrls.length > 0) {
                        // Same code for imageUrls if they exist
                        request.imageUrls.forEach(imageUrl => {
                            // Similar code as above for imageUrls
                            const imgContainer = document.createElement('div');
                            imgContainer.className = 'relative';
                            
                            const img = document.createElement('img');
                            img.src = imageUrl;
                            img.alt = 'Request Attachment';
                            img.className = 'rounded-lg w-full h-32 object-cover cursor-pointer';
                            img.onclick = function() {
                                window.open(imageUrl, '_blank');
                            };
                            
                            const downloadBtn = document.createElement('button');
                            downloadBtn.className = 'absolute bottom-2 right-2 bg-white bg-opacity-75 rounded-full p-1 hover:bg-opacity-100 transition';
                            downloadBtn.innerHTML = '<i class="ph ph-download text-gray-700"></i>';
                            downloadBtn.onclick = function(e) {
                                e.stopPropagation();
                                const a = document.createElement('a');
                                a.href = imageUrl;
                                a.download = `request-${request.id}-attachment`;
                                document.body.appendChild(a);
                                a.click();
                                document.body.removeChild(a);
                            };
                            
                            imgContainer.appendChild(img);
                            imgContainer.appendChild(downloadBtn);
                            attachmentsContainer.appendChild(imgContainer);
                        });
                        document.getElementById('pictureAttachmentSection').style.display = 'block';
                    } else {
                        // Show "no attachments" message
                        const noAttachmentsMsg = document.createElement('div');
                        noAttachmentsMsg.className = 'text-center p-4 bg-gray-50 rounded-lg text-gray-500';
                        noAttachmentsMsg.innerHTML = '<i class="ph ph-image-square text-2xl mb-2"></i><p>No images attached to this request</p>';
                        attachmentsContainer.appendChild(noAttachmentsMsg);
                        document.getElementById('pictureAttachmentSection').style.display = 'block';
                    }
                })
                .catch(error => {
                    console.error('Error fetching request details:', error);
                    alert('Failed to load request details. Please try again.');
                });

            // Store the request ID for updates
            document.getElementById('btnUpdateRequest').dataset.requestId = requestId;
            document.getElementById('btnDeleteRequest').dataset.requestId = requestId;
        }

        // Function to close request details modal
        function closeRequestDetailsModal() {
            document.getElementById('requestDetailsModal').classList.add('hidden');
        }

        // Function to update request status
        document.getElementById('btnUpdateRequest').addEventListener('click', function() {
            const requestId = this.dataset.requestId;
            const status = document.getElementById('statusUpdate').value;
            const staffNotes = document.getElementById('adminResponseText').value;

            if (!status) {
                alert('Please select a status');
                return;
            }
            
            fetch('/Admin/ServiceRequests/UpdateStatus', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({
                    id: requestId,
                    status: status,
                    staffNotes: staffNotes
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    closeRequestDetailsModal();
                    loadServiceRequests();
                    loadServiceRequestStats();
                    alert(data.message || 'Service request updated successfully');
                } else {
                    alert(data.message || 'Failed to update service request');
                }
            })
            .catch(error => {
                console.error('Error updating request:', error);
                alert('Failed to update request. Please try again later.');
            });
        });

        // Function to delete request
        document.getElementById('btnDeleteRequest').addEventListener('click', function() {
            if (!confirm('Are you sure you want to delete this request?')) {
                return;
            }

            const requestId = this.dataset.requestId;

            fetch(`/Admin/ServiceRequests/Delete/${requestId}`, {
                method: 'DELETE',
                headers: {
                    'Accept': 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    closeRequestDetailsModal();
                    loadServiceRequests();
                    loadServiceRequestStats();
                    alert(data.message || 'Service request deleted successfully');
                } else {
                    alert(data.message || 'Failed to delete service request');
                }
            })
            .catch(error => {
                console.error('Error deleting request:', error);
                alert('Failed to delete request. Please try again later.');
            });
        });

        // Filter functionality
        document.getElementById('btnFilterRequests').addEventListener('click', function() {
            document.getElementById('filterModal').classList.remove('hidden');
        });

        function closeFilterModal() {
            document.getElementById('filterModal').classList.add('hidden');
        }

        function resetFilters() {
            document.getElementById('filterStatus').value = '';
            document.getElementById('filterServiceType').value = '';
            document.getElementById('filterStartDate').value = '';
            document.getElementById('filterEndDate').value = '';
            loadServiceRequests();
            closeFilterModal();
        }

        // Apply filters
        document.getElementById('filterStatus').addEventListener('change', applyFilters);
        document.getElementById('filterServiceType').addEventListener('change', applyFilters);
        document.getElementById('filterStartDate').addEventListener('change', applyFilters);
        document.getElementById('filterEndDate').addEventListener('change', applyFilters);

        function applyFilters() {
            const status = document.getElementById('filterStatus').value;
            const serviceType = document.getElementById('filterServiceType').value;
            const startDate = document.getElementById('filterStartDate').value;
            const endDate = document.getElementById('filterEndDate').value;

            const rows = document.querySelectorAll('#serviceRequestsTableBody tr');
            rows.forEach(row => {
                const rowStatus = row.querySelector('td:nth-child(5) span').textContent;
                const rowServiceType = row.querySelector('td:nth-child(3) .text-sm').textContent;
                const rowDate = new Date(row.querySelector('td:nth-child(4)').textContent);

                const statusMatch = !status || rowStatus === status;
                const typeMatch = !serviceType || rowServiceType === serviceType;
                const dateMatch = (!startDate || rowDate >= new Date(startDate)) && 
                                (!endDate || rowDate <= new Date(endDate));

                row.style.display = statusMatch && typeMatch && dateMatch ? '' : 'none';
            });

            updateFilteredCount();
        }

        function updateFilteredCount() {
            const visibleRows = document.querySelectorAll('#serviceRequestsTableBody tr:not([style*="display: none"])').length;
            document.getElementById('currentCount').textContent = visibleRows;
        }
    </script>
}
