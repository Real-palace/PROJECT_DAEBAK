@model daebak_subdivision_website.Models.AdminPageModel
@{
    ViewData["Title"] = "Daebak Subdivision | Feedback Management";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";

    // For active menu indication in the admin layout
    var isFeedback = true;
}

@Html.AntiForgeryToken()

@section Styles {
    <style>
        /* Custom styling for feedback status indicators */
        .status-badge {
            font-size: 0.75rem;
            font-weight: 500;
            padding: 0.25rem 0.5rem;
            border-radius: 9999px;
        }        .status-submitted {
            background-color: rgba(220, 38, 38, 0.1);
            color: rgb(185, 28, 28);
        }
        
        .status-in-review {
            background-color: rgba(79, 70, 229, 0.1);
            color: rgb(67, 56, 202);
        }

        .status-in-progress {
            background-color: rgba(234, 179, 8, 0.1);
            color: rgb(161, 98, 7);
        }

        .status-resolved {
            background-color: rgba(34, 197, 94, 0.1);
            color: rgb(21, 128, 61);
        }
        
        .status-closed {
            background-color: rgba(75, 85, 99, 0.1);
            color: rgb(55, 65, 81);
        }
        
        /* For backward compatibility */
        .status-open {
            background-color: rgba(220, 38, 38, 0.1);
            color: rgb(185, 28, 28);
        }

        /* Transition for table rows */
        .feedback-row {
            transition: background-color 0.15s ease-in-out;
        }

        .feedback-row:hover {
            background-color: rgba(148, 176, 223, 0.05);
        }

        /* Custom scrollbar for feedback description */
        .custom-scrollbar::-webkit-scrollbar {
            width: 5px;
        }

        .custom-scrollbar::-webkit-scrollbar-track {
            background: transparent;
        }

        .custom-scrollbar::-webkit-scrollbar-thumb {
            background-color: rgba(0, 0, 0, 0.1);
            border-radius: 10px;
        }

        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
            background-color: rgba(0, 0, 0, 0.2);
        }

        /* Hide scrollbar when not hovering */
        .custom-scrollbar {
            scrollbar-width: thin;
            scrollbar-color: transparent transparent;
        }

        .custom-scrollbar:hover {
            scrollbar-color: rgba(0, 0, 0, 0.1) transparent;
        }

        /* Filter dropdown styling */
        .filter-dropdown {
            position: absolute;
            right: 0;
            top: 100%;
            background-color: white;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            border-radius: 0.375rem;
            width: 240px;
            opacity: 0;
            visibility: hidden;
            transform: translateY(10px);
            transition: opacity 0.2s ease, transform 0.2s ease, visibility 0.2s;
            z-index: 50;
        }

        .filter-dropdown.active {
            opacity: 1;
            visibility: visible;
            transform: translateY(0);
        }

        /* Reset button on the filter */
        .reset-filters {
            font-size: 0.75rem;
            color: #94B0DF;
            cursor: pointer;
            transition: color 0.2s ease;
        }

        .reset-filters:hover {
            color: #356480;
            text-decoration: underline;
        }
        
        /* Make sure action buttons are clickable */
        .view-feedback, .delete-feedback {
            position: relative;
            z-index: 10;
        }
    </style>
}

<!-- Page Header with Welcome -->
<div class="bg-white rounded-xl shadow-sm p-6 mb-6">
    <div class="flex items-center">
        <div class="flex-shrink-0 mr-4">
            <div class="bg-primary/10 p-3 rounded-full">
                <i class="ph ph-chat-circle-dots text-3xl text-primary"></i>
            </div>
        </div>
        <div>
            <h2 class="text-xl font-semibold text-gray-800">Feedback Management</h2>
            <p class="text-gray-600 mt-1">Review and respond to homeowner feedback and inquiries. Providing timely responses improves homeowner satisfaction.</p>
        </div>
    </div>
</div>

<!-- Stats Overview -->
<div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
    <!-- Open Feedback -->
    <div class="bg-white p-6 rounded-xl shadow-sm">
        <div class="flex justify-between items-start">
            <div>
                <h3 class="text-gray-500 text-sm font-medium">Open Feedback</h3>
                <p class="text-2xl font-semibold text-gray-800 mt-1" id="open-count">@(Model.FeedbackStats?.GetType().GetProperty("OpenCount")?.GetValue(Model.FeedbackStats, null) ?? 0)</p>
            </div>
            <div class="p-3 bg-red-50 rounded-lg">
                <i class="ph ph-chat-circle text-2xl text-red-500"></i>
            </div>
        </div>
        <div class="flex items-center mt-4">
            <span class="text-xs text-gray-500">Requires attention</span>
        </div>
    </div>

    <!-- In Progress -->
    <div class="bg-white p-6 rounded-xl shadow-sm">
        <div class="flex justify-between items-start">
            <div>
                <h3 class="text-gray-500 text-sm font-medium">In Progress</h3>
                <p class="text-2xl font-semibold text-gray-800 mt-1" id="progress-count">@(Model.FeedbackStats?.GetType().GetProperty("InProgressCount")?.GetValue(Model.FeedbackStats, null) ?? 0)</p>
            </div>
            <div class="p-3 bg-yellow-50 rounded-lg">
                <i class="ph ph-spinner text-2xl text-yellow-500"></i>
            </div>
        </div>
        <div class="flex items-center mt-4">
            <span class="text-xs text-gray-500">Currently being addressed</span>
        </div>
    </div>

    <!-- Resolved -->
    <div class="bg-white p-6 rounded-xl shadow-sm">
        <div class="flex justify-between items-start">
            <div>
                <h3 class="text-gray-500 text-sm font-medium">Resolved</h3>
                <p class="text-2xl font-semibold text-gray-800 mt-1" id="resolved-count">@(Model.FeedbackStats?.GetType().GetProperty("ResolvedCount")?.GetValue(Model.FeedbackStats, null) ?? 0)</p>
            </div>
            <div class="p-3 bg-green-50 rounded-lg">
                <i class="ph ph-check-circle text-2xl text-green-500"></i>
            </div>
        </div>
        <div class="flex items-center mt-4">
            <span class="text-xs text-gray-500">Successfully resolved</span>
        </div>
    </div>
</div>

<!-- Feedback Management Section -->
<div class="bg-white p-6 rounded-xl shadow-sm">
    <div class="flex flex-col sm:flex-row gap-4 sm:items-center justify-between mb-6">
        <!-- Search Bar -->
        <div class="relative flex-grow max-w-md">
            <div class="absolute inset-y-0 left-0 flex items-center pl-3">
                <i class="ph ph-magnifying-glass text-gray-400"></i>
            </div>
            <input id="search-feedback" type="text" class="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent" placeholder="Search by name, house number, or feedback...">
        </div>

        <!-- Filters -->
        <div class="flex items-center gap-2">
            <!-- Status Filter -->
            <div class="relative">
                <button id="status-filter-btn" class="px-4 py-2 bg-gray-100 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-200 transition-colors flex items-center gap-2">
                    <i class="ph ph-funnel"></i> Filter <i class="ph ph-caret-down text-xs ml-1"></i>
                </button>

                <!-- Status Filter Dropdown -->
                <div id="status-filter-dropdown" class="filter-dropdown p-3">
                    <div class="flex justify-between items-center mb-2 pb-2 border-b border-gray-100">
                        <h5 class="font-medium text-sm text-gray-700">Filter Feedback</h5>
                        <span class="reset-filters" id="reset-filters">Reset</span>
                    </div>

                    <!-- Status Filters -->
                    <div class="mb-4">
                        <p class="text-xs text-gray-500 mb-2">Status</p>                        <div class="space-y-2">
                            <label class="flex items-center">
                                <input type="checkbox" name="status" value="Submitted" class="rounded text-primary focus:ring-primary">
                                <span class="ml-2 text-sm text-gray-700">Submitted</span>
                            </label>
                            <label class="flex items-center">
                                <input type="checkbox" name="status" value="In Review" class="rounded text-primary focus:ring-primary">
                                <span class="ml-2 text-sm text-gray-700">In Review</span>
                            </label>
                            <label class="flex items-center">
                                <input type="checkbox" name="status" value="In Progress" class="rounded text-primary focus:ring-primary">
                                <span class="ml-2 text-sm text-gray-700">In Progress</span>
                            </label>
                            <label class="flex items-center">
                                <input type="checkbox" name="status" value="Resolved" class="rounded text-primary focus:ring-primary">
                                <span class="ml-2 text-sm text-gray-700">Resolved</span>
                            </label>
                            <label class="flex items-center">
                                <input type="checkbox" name="status" value="Closed" class="rounded text-primary focus:ring-primary">
                                <span class="ml-2 text-sm text-gray-700">Closed</span>
                            </label>
                        </div>
                    </div>

                    <!-- Type Filters -->
                    <div class="mb-4">
                        <p class="text-xs text-gray-500 mb-2">Feedback Type</p>
                        <div class="space-y-2">
                            <label class="flex items-center">
                                <input type="checkbox" name="type" value="General" class="rounded text-primary focus:ring-primary">
                                <span class="ml-2 text-sm text-gray-700">General</span>
                            </label>
                            <label class="flex items-center">
                                <input type="checkbox" name="type" value="Complaint" class="rounded text-primary focus:ring-primary">
                                <span class="ml-2 text-sm text-gray-700">Complaint</span>
                            </label>
                            <label class="flex items-center">
                                <input type="checkbox" name="type" value="Suggestion" class="rounded text-primary focus:ring-primary">
                                <span class="ml-2 text-sm text-gray-700">Suggestion</span>
                            </label>
                            <label class="flex items-center">
                                <input type="checkbox" name="type" value="Request" class="rounded text-primary focus:ring-primary">
                                <span class="ml-2 text-sm text-gray-700">Request</span>
                            </label>
                        </div>
                    </div>

                    <!-- Date Range Filter -->
                    <div>
                        <p class="text-xs text-gray-500 mb-2">Date Range</p>
                        <div class="space-y-2">
                            <div>
                                <label class="text-xs text-gray-500">From</label>
                                <input type="date" name="dateFrom" class="mt-1 block w-full text-sm border border-gray-300 rounded-lg px-3 py-1.5">
                            </div>
                            <div>
                                <label class="text-xs text-gray-500">To</label>
                                <input type="date" name="dateTo" class="mt-1 block w-full text-sm border border-gray-300 rounded-lg px-3 py-1.5">
                            </div>
                        </div>
                    </div>

                    <!-- Apply Filters Button -->
                    <button id="apply-filters" class="mt-4 w-full bg-primary text-white py-2 rounded-lg text-sm font-medium hover:bg-primary/90 transition-colors">
                        Apply Filters
                    </button>
                </div>
            </div>

            <!-- Sort Dropdown -->
            <div class="relative">
                <button id="sort-dropdown-btn" class="px-4 py-2 bg-gray-100 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-200 transition-colors flex items-center gap-2">
                    <i class="ph ph-sort-ascending"></i> Sort <i class="ph ph-caret-down text-xs ml-1"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Active Filters Display Area -->
    <div id="active-filters" class="flex flex-wrap gap-2 mb-4 hidden">
        <!-- Filter pills will be added here by JavaScript -->
    </div>

    <!-- Feedback Table -->
    <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
            <thead>
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Submitted By</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Feedback</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Action</th>
                </tr>
            </thead>
            <!-- Replace the static table body with dynamic data -->
            <tbody class="bg-white divide-y divide-gray-200" id="feedback-table-body">
                @if (Model.Feedbacks != null && Model.Feedbacks.Any())
                {
                    foreach (var feedback in Model.Feedbacks)
                    {
                        <tr class="feedback-row hover:bg-gray-50 cursor-pointer" data-id="@feedback.FeedbackId">
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="flex items-center">
                                    <div class="text-sm font-medium text-gray-900">@feedback.UserName</div>
                                </div>
                                <div class="text-xs text-gray-500">@feedback.HouseNumber</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                @{
                                    string typeBgColor = feedback.FeedbackType switch
                                    {
                                        "Complaint" => "bg-red-100 text-red-800",
                                        "Suggestion" => "bg-blue-100 text-blue-800",
                                        "Request" => "bg-purple-100 text-purple-800",
                                        _ => "bg-gray-100 text-gray-800"
                                    };
                                }
                                <span class="px-2 py-1 text-xs @typeBgColor rounded-full">@feedback.FeedbackType</span>
                            </td>
                            <td class="px-6 py-4">
                                <div class="text-sm text-gray-900">@(feedback.Description.Length > 70 ? feedback.Description.Substring(0, 70) + "..." : feedback.Description)</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                @{
                                    var date = DateTime.TryParse(feedback.CreatedAt, out var parsedDate) 
                                        ? parsedDate.ToString("MMM dd, yyyy") 
                                        : feedback.CreatedAt;
                                }
                                @date
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                @{                                    string statusClass = feedback.Status switch
                                    {
                                        "Submitted" => "status-submitted",
                                        "Open" => "status-submitted", // For backward compatibility
                                        "In Review" => "status-in-review",
                                        "In Progress" => "status-in-progress",
                                        "Resolved" => "status-resolved",
                                        "Closed" => "status-closed",
                                        _ => "status-submitted"
                                    };
                                }
                                <span class="status-badge @statusClass">@feedback.Status</span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                <button class="view-feedback text-primary hover:text-primary/80 mr-3" data-id="@feedback.FeedbackId">
                                    <i class="ph ph-eye"></i>
                                </button>
                                <button class="delete-feedback text-red-600 hover:text-red-800" data-id="@feedback.FeedbackId">
                                    <i class="ph ph-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6" class="px-6 py-4 text-center text-sm text-gray-500">
                            No feedback data available.
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <div class="flex items-center justify-between mt-6">
        <div class="text-sm text-gray-500" id="pagination-info">
            Showing <span id="showing-start">1</span> to <span id="showing-end">7</span> of <span id="total-items">7</span> feedbacks
        </div>
        <div class="flex items-center space-x-2">
            <button id="prev-page" class="px-3 py-1 bg-gray-100 rounded-lg text-sm text-gray-700 hover:bg-gray-200 transition-colors disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                Previous
            </button>
            <div id="page-numbers" class="flex items-center space-x-1">
                <span class="px-3 py-1 bg-primary text-white rounded-lg">1</span>
            </div>
            <button id="next-page" class="px-3 py-1 bg-gray-100 rounded-lg text-sm text-gray-700 hover:bg-gray-200 transition-colors disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                Next
            </button>
        </div>
    </div>
</div>

<!-- Feedback View/Response Modal -->
<div id="feedback-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 z-50 flex items-center justify-center hidden">
    <div class="bg-white rounded-lg max-w-2xl w-full p-6 max-h-[90vh] overflow-y-auto">
        <div class="flex justify-between items-start mb-4">
            <h3 class="text-lg font-medium text-gray-900" id="modal-title">Feedback Details</h3>
            <button id="close-feedback-modal" class="text-gray-500 hover:text-gray-700">
                <i class="ph ph-x text-xl"></i>
            </button>
        </div>

        <div id="feedback-detail-view">
            <!-- Feedback Type & Status -->
            <div class="flex flex-wrap items-center justify-between mb-4">
                <div class="flex items-center mb-2 sm:mb-0">
                    <span id="feedback-type-badge" class="bg-blue-100 text-blue-800 text-xs px-2.5 py-0.5 rounded-full mr-2">Type</span>
                    <span id="feedback-date" class="text-sm text-gray-500">Submitted on: May 1, 2025</span>
                </div>                <div class="flex items-center">
                    <span class="text-sm text-gray-500 mr-2">Status:</span>
                    <select id="feedback-status" class="border-gray-300 rounded-md text-sm focus:ring-primary focus:border-primary">
                        <option value="Submitted">Submitted</option>
                        <option value="In Review">In Review</option>
                        <option value="In Progress">In Progress</option>
                        <option value="Resolved">Resolved</option>
                        <option value="Closed">Closed</option>
                    </select>
                    <button id="save-status" class="ml-2 bg-secondary text-white px-2 py-1 rounded text-xs">Update</button>
                </div>
            </div>

            <!-- Resident Info -->
            <div class="bg-gray-50 p-4 rounded-lg mb-4">
                <h4 class="text-sm font-medium text-gray-700 mb-2">Resident Information</h4>
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-2">
                    <div>
                        <p class="text-xs text-gray-500">Name</p>
                        <p id="resident-name" class="text-sm font-medium">John Smith</p>
                    </div>
                    <div>
                        <p class="text-xs text-gray-500">House Number</p>
                        <p id="house-number" class="text-sm font-medium">Block 1, Lot 23</p>
                    </div>
                </div>
            </div>

            <!-- Feedback Content -->
            <div class="mb-6">
                <h4 class="text-sm font-medium text-gray-700 mb-2">Feedback Content</h4>
                <div class="border border-gray-200 rounded-lg p-4 bg-gray-50">
                    <p id="feedback-content" class="text-sm text-gray-700 whitespace-pre-line"></p>
                </div>
            </div>

            <!-- Response Section -->
            <div>
                <h4 class="text-sm font-medium text-gray-700 mb-2">Your Response</h4>
                <textarea id="response-text" rows="4" class="w-full border border-gray-300 rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"></textarea>
                <div class="mt-2">
                    <button id="send-response" class="bg-primary text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-primary/90 transition-colors">
                        <i class="ph ph-paper-plane-right mr-1"></i> Send Response
                    </button>
                    <span id="response-message" class="ml-3 text-sm text-gray-500 hidden">Response sent successfully!</span>
                </div>
            </div>

            <!-- Response History -->
            <div class="mt-6" id="response-history-section">
                <h4 class="text-sm font-medium text-gray-700 mb-2">Response History</h4>
                <div id="response-history" class="space-y-3">
                    <!-- Response history items will be added here by JavaScript -->
                    <div class="border-l-2 border-gray-300 pl-3 py-2">
                        <p class="text-xs text-gray-500">May 3, 2025 at 14:30</p>
                        <p class="text-sm text-gray-700 mt-1">Thank you for your feedback. We're looking into this issue and will provide an update soon.</p>
                        <p class="text-xs text-gray-500 mt-1">- Admin</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="delete-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 z-50 flex items-center justify-center hidden" data-feedback-id="">
    <div class="bg-white rounded-lg max-w-md w-full p-6">
        <h3 class="text-lg font-medium text-gray-900 mb-4">Confirm Deletion</h3>
        <p class="text-gray-500 mb-5">Are you sure you want to delete this feedback? This action cannot be undone.</p>
        <div class="flex justify-end gap-3">
            <button id="cancel-delete" class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200">Cancel</button>
            <button id="confirm-delete" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700">Yes, Delete</button>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Toast Notification Container -->
    <div id="toast-container" class="fixed top-4 right-4 z-50"></div>    <script>
        // Toast notification function - defined at global scope so it can be accessed by all functions
        function showToast(message, type = 'success') {
    const toastContainer = document.getElementById('toast-container');
    
    // Create toast element
    const toast = document.createElement('div');
    toast.className = `flex items-center p-4 mb-3 rounded shadow-lg animate-fade-in ${
        type === 'success' ? 'bg-green-50 text-green-800 border-l-4 border-green-600' : 
        type === 'error' ? 'bg-red-50 text-red-800 border-l-4 border-red-600' : 
        'bg-blue-50 text-blue-800 border-l-4 border-blue-600'
    }`;
    
    // Set toast content
    toast.innerHTML = `
        <div class="mr-3">
            ${type === 'success' 
              ? '<i class="ph ph-check-circle text-lg"></i>' 
              : type === 'error' 
                ? '<i class="ph ph-x-circle text-lg"></i>'
                : '<i class="ph ph-info text-lg"></i>'
            }
        </div>
        <div class="flex-grow">${message}</div>
        <button class="ml-auto text-gray-500 hover:text-gray-800">
            <i class="ph ph-x"></i>
        </button>
    `;
    
    // Add to container
    toastContainer.appendChild(toast);
    
    // Add click event to close button
    toast.querySelector('button').addEventListener('click', () => {
        toast.classList.add('animate-fade-out');
        setTimeout(() => toast.remove(), 300);
    });
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        if (toast.parentNode) {
            toast.classList.add('animate-fade-out');
            setTimeout(() => toast.remove(), 300);
        }
    }, 5000);
}
            
        document.addEventListener('DOMContentLoaded', function() {
            // Highlight the management icon since we're on the feedback page
            const managementBtn = document.getElementById('management-btn');
            if (managementBtn) {
                const managementIcon = managementBtn.querySelector('i');
                if (managementIcon) {
                    managementIcon.classList.add('text-tertiary');
                }
                managementBtn.closest('.management-item').classList.add('active');
            }
            
            // Handle click events for view and delete buttons
            document.querySelectorAll('.view-feedback').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.stopPropagation();
                    const feedbackId = parseInt(this.dataset.id);
                    showFeedbackDetails(feedbackId);
                });
            });

            document.querySelectorAll('.delete-feedback').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.stopPropagation();
                    const feedbackId = parseInt(this.dataset.id);
                    showDeleteConfirmation(feedbackId);
                });
            });

            // Modify row click event to not interfere with action buttons
            document.querySelectorAll('.feedback-row').forEach(row => {
                row.addEventListener('click', function(e) {
                    // Only trigger if not clicking on the action buttons
                    if (!e.target.closest('.view-feedback') && !e.target.closest('.delete-feedback')) {
                        const feedbackId = parseInt(this.dataset.id);
                        showFeedbackDetails(feedbackId);
                    }
                });
            });

            function showFeedbackDetails(id) {
            // Display a loading state in the modal
            document.getElementById('feedback-modal').classList.remove('hidden');
            document.getElementById('modal-title').textContent = `Feedback #${id}`;
            document.getElementById('feedback-detail-view').innerHTML = `
                <div class="flex justify-center items-center p-8">
                    <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
                    <span class="ml-3 text-gray-700">Loading feedback details...</span>
                </div>
            `;
            document.body.style.overflow = 'hidden'; // Prevent scrolling
            
            // Fetch feedback details
            console.log(`Fetching feedback details for ID: ${id}`);
            
            fetch(`/Admin/Feedback/GetDetails/${id}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Server returned ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Feedback details received:', data);
                    
                    if (!data || !data.success) {
                        throw new Error(data?.message || 'Failed to load feedback details');
                    }
                    
                    const feedback = data.feedback;
                    const createdDate = new Date(feedback.createdAt).toLocaleString();
                    
                    // Build a more professional UI
                    document.getElementById('feedback-detail-view').innerHTML = `
                        <!-- Status Panel -->
                        <div class="bg-white rounded-lg shadow-md mb-6 overflow-hidden">
                            <div class="px-4 py-3 bg-gray-50 border-b flex justify-between items-center">
                                <div class="flex items-center space-x-2">
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColorClasses(feedback.status)}">
                                        ${feedback.status}
                                    </span>
                                    <span class="text-sm text-gray-500">ID: ${feedback.feedbackId}</span>
                                </div>
                                <div class="flex items-center space-x-2">
                                    <select id="feedback-status" class="text-sm border-gray-300 rounded-md focus:ring-primary focus:border-primary">
                                        <option value="Submitted" ${feedback.status === 'Submitted' ? 'selected' : ''}>Submitted</option>
                                        <option value="In Review" ${feedback.status === 'In Review' ? 'selected' : ''}>In Review</option>
                                        <option value="In Progress" ${feedback.status === 'In Progress' ? 'selected' : ''}>In Progress</option>
                                        <option value="Resolved" ${feedback.status === 'Resolved' ? 'selected' : ''}>Resolved</option>
                                        <option value="Closed" ${feedback.status === 'Closed' ? 'selected' : ''}>Closed</option>
                                    </select>
                                    <button id="save-status" onclick="updateFeedbackStatus()" 
                                        class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded shadow-sm text-white bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
                                        Update Status
                                    </button>
                                </div>
                            </div>
                            
                            <!-- Resident Info -->
                            <div class="p-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <h3 class="text-xs font-semibold text-gray-500 uppercase tracking-wider mb-2">Resident Information</h3>
                                    <div class="grid grid-cols-2 gap-3">
                                        <div>
                                            <div class="text-xs text-gray-500">Name</div>
                                            <div class="font-medium">${feedback.userName || 'Not specified'}</div>
                                        </div>
                                        <div>
                                            <div class="text-xs text-gray-500">House #</div>
                                            <div class="font-medium">${feedback.houseNumber || 'Not specified'}</div>
                                        </div>
                                    </div>
                                </div>
                                <div>
                                    <h3 class="text-xs font-semibold text-gray-500 uppercase tracking-wider mb-2">Feedback Information</h3>
                                    <div class="grid grid-cols-2 gap-3">
                                        <div>
                                            <div class="text-xs text-gray-500">Type</div>
                                            <div class="font-medium">${feedback.feedbackType}</div>
                                        </div>
                                        <div>
                                            <div class="text-xs text-gray-500">Submitted</div>
                                            <div class="font-medium">${createdDate}</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Description -->
                        <div class="bg-white rounded-lg shadow-md mb-6">
                            <div class="px-4 py-3 bg-gray-50 border-b">
                                <h3 class="text-sm font-medium text-gray-700">Description</h3>
                            </div>
                            <div class="p-4">
                                <div class="bg-gray-50 p-4 rounded-lg border border-gray-200 max-h-60 overflow-y-auto custom-scrollbar">
                                    <p class="text-sm whitespace-pre-line">${feedback.description}</p>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Actions -->
                        <div class="flex justify-end mt-6">
                            <button onclick="closeFeedbackModal()" 
                                class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
                                <i class="ph ph-x-circle mr-1"></i>
                                Close
                            </button>
                        </div>
                    `;
                    
                    // Store the feedback ID in a data attribute for easier access
                    document.getElementById('feedback-modal').dataset.feedbackId = feedback.feedbackId;
                })
                .catch(error => {
                    console.error('Error loading feedback details:', error);
                    document.getElementById('feedback-detail-view').innerHTML = `
                        <div class="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
                            <div class="flex">
                                <div class="flex-shrink-0">
                                    <i class="ph ph-warning-circle text-red-600 text-xl"></i>
                                </div>
                                <div class="ml-3">
                                    <h3 class="text-red-800 font-medium">Failed to load feedback details</h3>
                                    <p class="text-red-700 mt-1">${error.message || 'Unknown error occurred'}</p>
                                </div>
                            </div>
                        </div>
                        
                        <div class="flex justify-end mt-4">
                            <button onclick="closeFeedbackModal()" 
                                class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
                                Close
                            </button>
                        </div>
                    `;
                });
        }

            // Utility function to get status color classes
            function getStatusColorClasses(status) {
                switch (status) {
                    case 'Submitted':
                        return 'bg-blue-100 text-blue-800';
                    case 'In Review':
                        return 'bg-yellow-100 text-yellow-800';
                    case 'In Progress':
                        return 'bg-purple-100 text-purple-800';
                    case 'Resolved':
                        return 'bg-green-100 text-green-800';
                    case 'Closed':
                        return 'bg-gray-100 text-gray-800';
                    default:
                        return 'bg-gray-100 text-gray-800';
                }
            }
            
            // Function to close the feedback modal
            function closeFeedbackModal() {
                document.getElementById('feedback-modal').classList.add('hidden');
                document.body.style.overflow = 'auto'; // Re-enable scrolling
            }
            
            function updateFeedbackStatus() {
            // Get the current feedback ID and selected status
            const feedbackId = document.getElementById('modal-title').textContent.replace('Feedback #', '');
            const newStatus = document.getElementById('feedback-status').value;
            
            // Show updating indicator on the button
            const saveStatusBtn = document.getElementById('save-status');
            const originalBtnText = saveStatusBtn.innerHTML;
            saveStatusBtn.innerHTML = '<i class="ph ph-spinner ph-spin"></i> Updating...';
            saveStatusBtn.disabled = true;
            
            // Get CSRF token
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            
            // Create form data - this is key for proper submission
            const formData = new FormData();
            formData.append('id', feedbackId);
            formData.append('status', newStatus);
            formData.append('__RequestVerificationToken', token);
            
            console.log(`Updating feedback #${feedbackId} to status: ${newStatus}`);
            
            // Send AJAX request using FormData instead of JSON
            fetch('/Feedback/Admin/UpdateFeedbackStatus', {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': token
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Server returned ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // Update the status badge in the modal
                    const statusBadges = document.querySelectorAll('#feedback-detail-view .rounded-full');
                    if (statusBadges.length > 0) {
                        const badge = statusBadges[0];
                        badge.className = `inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColorClasses(newStatus)}`;
                        badge.textContent = newStatus;
                    }
                    
                    showToast(`Status updated to ${newStatus}`);
                    
                    // Also update in the table if present
                    const statusBadge = document.querySelector(`.feedback-row[data-id="${feedbackId}"] .status-badge`);
                    if (statusBadge) {
                        // Update the class based on new status
                        statusBadge.className = `status-badge status-${newStatus.toLowerCase().replace(' ', '-')}`;
                        statusBadge.textContent = newStatus;
                    }
                } else {
                    showToast('Failed to update status: ' + (data.message || 'Unknown error'), 'error');
                }
                
                // Restore button state
                saveStatusBtn.innerHTML = originalBtnText;
                saveStatusBtn.disabled = false;
            })
            .catch(error => {
                console.error('Error updating status:', error);
                showToast('An error occurred while updating status', 'error');
                // Restore button state
                saveStatusBtn.innerHTML = originalBtnText;
                saveStatusBtn.disabled = false;
            });
        }
            
            // Function to add feedback response
            function addFeedbackResponse(feedbackId) {
                const responseText = document.getElementById('response-text').value;
                if (!responseText.trim()) {
                    showToast('Response text cannot be empty', 'error');
                    return;
                }
                
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                
                fetch('/Admin/AddFeedbackResponse', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': token
                    },
                    body: `feedbackId=${feedbackId}&responseText=${encodeURIComponent(responseText)}&__RequestVerificationToken=${token}`
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Clear the textarea
                        document.getElementById('response-text').value = '';
                        
                        // Add the new response to the top of the responses container
                        const responsesContainer = document.getElementById('responses-container');
                        const responseDiv = document.createElement('div');
                        responseDiv.className = 'bg-gray-50 p-3 rounded-lg';
                        responseDiv.innerHTML = `
                            <div class="flex justify-between items-center mb-2">
                                <span class="font-medium">${data.response.RespondedBy}</span>
                                <span class="text-xs text-gray-500">${data.response.RespondedAt}</span>
                            </div>
                            <p class="text-gray-600">${data.response.ResponseText}</p>
                        `;
                        
                        // If there was a "No responses yet" message, remove it
                        if (responsesContainer.innerText.includes('No responses yet')) {
                            responsesContainer.innerHTML = '';
                        }
                        
                        responsesContainer.insertBefore(responseDiv, responsesContainer.firstChild);
                        
                        // Show success message
                        showToast('Response added successfully', 'success');
                    } else {
                        showToast(data.message || 'Failed to add response', 'error');
                    }
                })
                .catch(error => {
                    showToast('Error adding response', 'error');
                    console.error('Error:', error);
                });
            }
            
            // Show delete confirmation modal
            function showDeleteConfirmation(id) {
                const deleteModal = document.getElementById('delete-modal');
                deleteModal.classList.remove('hidden');
                deleteModal.dataset.feedbackId = id;
                document.body.style.overflow = 'hidden'; // Prevent scrolling
            }

            // Filter functionality
            const statusFilterBtn = document.getElementById('status-filter-btn');
            const statusFilterDropdown = document.getElementById('status-filter-dropdown');
            const applyFiltersBtn = document.getElementById('apply-filters');
            const resetFiltersBtn = document.getElementById('reset-filters');
            const searchInput = document.getElementById('search-feedback');
            
            // Toggle filter dropdown
            statusFilterBtn.addEventListener('click', function() {
                statusFilterDropdown.classList.toggle('active');
            });
            
            // Close dropdown when clicking outside
            document.addEventListener('click', function(e) {
                if (!statusFilterBtn.contains(e.target) && !statusFilterDropdown.contains(e.target)) {
                    statusFilterDropdown.classList.remove('active');
                }
            });
            
            // Setup filter functionality (would normally send API requests)
            // For this static implementation, just show a toast message
            applyFiltersBtn.addEventListener('click', function() {
                statusFilterDropdown.classList.remove('active');
                showToast('Filters applied successfully');
            });
            
            resetFiltersBtn.addEventListener('click', function() {
                document.querySelectorAll('input[name="status"], input[name="type"]').forEach(cb => {
                    cb.checked = false;
                });
                
                document.querySelector('input[name="dateFrom"]').value = '';
                document.querySelector('input[name="dateTo"]').value = '';
                showToast('Filters reset');
            });
            
            // Event handler for closing the feedback modal
            document.getElementById('close-feedback-modal').addEventListener('click', function() {
                document.getElementById('feedback-modal').classList.add('hidden');
                document.body.style.overflow = ''; // Re-enable scrolling
            });
            
            // Event handler for sending a response
            document.getElementById('send-response').addEventListener('click', function() {
                const responseText = document.getElementById('response-text').value.trim();
                if (!responseText) {
                    showToast('Please enter a response message', 'error');
                    return;
                }
                  // Get the feedback ID from the modal title
                const feedbackId = document.getElementById('modal-title').textContent.replace('Feedback #', '');                  // Send API request to save the response
                fetch('/Admin/AddFeedbackResponse', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        feedbackId: parseInt(feedbackId),
                        responseText: responseText
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById('response-message').classList.remove('hidden');
                        document.getElementById('response-text').value = '';
                        showToast('Response sent successfully');
                        
                        // Add to the response history
                        const responseHistory = document.getElementById('response-history');
                        const responseItem = document.createElement('div');
                        responseItem.className = 'border-l-2 border-gray-300 pl-3 py-2';
                        
                        responseItem.innerHTML = `
                            <p class="text-xs text-gray-500">${data.response.respondedAt}</p>
                            <p class="text-sm text-gray-700 mt-1">${data.response.responseText}</p>
                            <p class="text-xs text-gray-500 mt-1">- ${data.response.respondedBy}</p>
                        `;
                        
                        responseHistory.insertBefore(responseItem, responseHistory.firstChild);
                        document.getElementById('response-history-section').classList.remove('hidden');
                    } else {
                        showToast('Failed to send response: ' + data.message, 'error');
                    }
                })
                .catch(error => {
                    console.error('Error sending response:', error);
                    showToast('An error occurred while sending response', 'error');
                });
            });            
            // Event handler for updating status - this handler is no longer needed here
            // as it's been moved to the updateFeedbackStatus function 
            // and attached via setupModalEventListeners
            
            // Event handlers for delete confirmation modal
            document.getElementById('cancel-delete').addEventListener('click', function() {
                document.getElementById('delete-modal').classList.add('hidden');
                document.body.style.overflow = ''; // Re-enable scrolling
            });
            
            document.getElementById('confirm-delete').addEventListener('click', function() {
                const feedbackId = document.getElementById('delete-modal').dataset.feedbackId;
                  // Send AJAX request to delete feedback
                fetch('/Feedback/Admin/DeleteFeedback', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        id: parseInt(feedbackId)
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast('Feedback deleted successfully');
                        document.getElementById('delete-modal').classList.add('hidden');
                        document.body.style.overflow = ''; // Re-enable scrolling
                        // Refresh the table or remove the specific row
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showToast('Failed to delete feedback', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error deleting feedback:', error);
                    showToast('An error occurred while deleting feedback', 'error');
                });
            });
            
            // Close modals when clicking outside
            document.getElementById('feedback-modal').addEventListener('click', function(e) {
                if (e.target === this) {
                    this.classList.add('hidden');
                    document.body.style.overflow = ''; // Re-enable scrolling
                }
            });
            
            document.getElementById('delete-modal').addEventListener('click', function(e) {
                if (e.target === this) {
                    this.classList.add('hidden');
                    document.body.style.overflow = ''; // Re-enable scrolling
                }
            });
        });        
        
        // Function to set up event listeners for modal elements after the modal content is rebuilt
        function setupModalEventListeners() {
            // Make sure the elements exist before attaching event listeners
            const saveStatusBtn = document.getElementById('save-status');
            if (saveStatusBtn) {
                saveStatusBtn.addEventListener('click', updateFeedbackStatus);
            }
            
            const sendResponseBtn = document.getElementById('send-response');
            if (sendResponseBtn) {
                sendResponseBtn.addEventListener('click', sendFeedbackResponse);
            }
            // Add any other event listeners needed for elements inside the modal
        }        
        
           function updateFeedbackStatus() {
            // Get the current feedback ID and selected status
            const feedbackId = parseInt(document.getElementById('modal-title').textContent.replace('Feedback #', ''));
            const newStatus = document.getElementById('feedback-status').value;
            
            // Show updating indicator on the button
            const saveStatusBtn = document.getElementById('save-status');
            const originalBtnText = saveStatusBtn.innerHTML;
            saveStatusBtn.innerHTML = '<i class="ph ph-spinner ph-spin"></i> Updating...';
            saveStatusBtn.disabled = true;
            
            // Get CSRF token
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            
            console.log(`Trying to update feedback ID ${feedbackId} to status: "${newStatus}"`);
            
            // Build form data for submission
            const formData = new URLSearchParams();
            formData.append('id', feedbackId);
            formData.append('status', newStatus);
            formData.append('__RequestVerificationToken', token);
            
            // Send AJAX request - note the correct URL format
            fetch('/Feedback/Admin/UpdateFeedbackStatus', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token
                },
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Server returned ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Status update response:', data);
                
                if (data.success) {
                    // Update the status badge in the modal
                    const statusBadges = document.querySelectorAll('#feedback-detail-view .rounded-full');
                    if (statusBadges.length > 0) {
                        const badge = statusBadges[0];
                        badge.className = `inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColorClasses(newStatus)}`;
                        badge.textContent = newStatus;
                    }
                    
                    showToast(`Status updated to ${newStatus}`);
                    
                    // Also update in the table if present
                    const statusBadge = document.querySelector(`.feedback-row[data-id="${feedbackId}"] .status-badge`);
                    if (statusBadge) {
                        // Update the status badge in the table
                        const oldStatusClasses = Array.from(statusBadge.classList)
                            .filter(cls => cls.startsWith('status-') && cls !== 'status-badge');
                        oldStatusClasses.forEach(cls => statusBadge.classList.remove(cls));
                        
                        statusBadge.classList.add(`status-${newStatus.toLowerCase().replace(' ', '-')}`);
                        statusBadge.textContent = newStatus;
                    }
                } else {
                    showToast('Failed to update status: ' + (data.message || 'Unknown error'), 'error');
                }
                
                // Restore button state
                saveStatusBtn.innerHTML = originalBtnText;
                saveStatusBtn.disabled = false;
            })
            .catch(error => {
                console.error('Error updating status:', error);
                showToast('An error occurred while updating status', 'error');
                
                // Restore button state
                saveStatusBtn.innerHTML = originalBtnText;
                saveStatusBtn.disabled = false;
            });
        }

        function showDeleteConfirmation(id) {
            const deleteModal = document.getElementById('delete-modal');
            deleteModal.classList.remove('hidden');
            deleteModal.dataset.feedbackId = id;
            document.body.style.overflow = 'hidden'; // Prevent scrolling
        }

        function cancelDelete() {
            document.getElementById('delete-modal').classList.add('hidden');
            document.body.style.overflow = ''; // Re-enable scrolling
        }

        function confirmDelete() {
            const feedbackId = document.getElementById('delete-modal').dataset.feedbackId;
            const deleteBtn = document.getElementById('confirm-delete');
            const originalBtnText = deleteBtn.innerHTML;
            deleteBtn.innerHTML = '<i class="ph ph-spinner ph-spin"></i> Deleting...';
            deleteBtn.disabled = true;

            // Get the CSRF token
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            
            // Create form data
            const formData = new FormData();
            formData.append('id', feedbackId);
            formData.append('__RequestVerificationToken', token);
            
            // Send deletion request
            fetch('/Feedback/Admin/DeleteFeedback', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': token
                },
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('Feedback deleted successfully');
                    cancelDelete();
                    closeFeedbackModal();
                    // Reload the page or remove the feedback from the table
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showToast('Error: ' + (data.message || 'Could not delete feedback'), 'error');
                    deleteBtn.innerHTML = originalBtnText;
                    deleteBtn.disabled = false;
                }
            })
            .catch(error => {
                console.error('Error deleting feedback:', error);
                showToast('An error occurred while deleting feedback', 'error');
                deleteBtn.innerHTML = originalBtnText;
                deleteBtn.disabled = false;
            });
        }
    </script>
}