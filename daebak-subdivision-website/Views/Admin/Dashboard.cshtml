@model daebak_subdivision_website.Models.AdminPageModel
@{
    var currentController = ViewContext.RouteData.Values["controller"]?.ToString();
    var currentAction = ViewContext.RouteData.Values["action"]?.ToString();
    var isUserManagement = currentController?.Equals("UserManagement", StringComparison.OrdinalIgnoreCase) == true;

    ViewData["Title"] = "Daebak Subdivision | Admin Dashboard";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";

    // Get welcome name from TempData if available
    var welcomeName = TempData["DashboardWelcome"] as string;
}

@section Styles {
    <!-- Calendar & Chart Specific Styles -->
    <style>
        /* Calendar Styles */
        .fc {
            font-family: 'Poppins', sans-serif;
        }

            .fc .fc-toolbar-title {
                font-size: 1.25em;
                font-weight: 500;
                color: #356480;
            }

            .fc .fc-button-primary {
                background-color: #356480;
                border-color: #356480;
                font-family: 'Poppins', sans-serif;
                font-weight: 500;
            }

                .fc .fc-button-primary:hover {
                    background-color: #94B0DF;
                    border-color: #94B0DF;
                }

                .fc .fc-button-primary:disabled {
                    background-color: #94B0DF;
                    border-color: #94B0DF;
                    opacity: 0.7;
                }

            .fc .fc-daygrid-day.fc-day-today {
                background-color: rgba(148, 176, 223, 0.2);
            }

            .fc .fc-daygrid-day-number {
                font-weight: 500;
                font-size: 0.85rem;
                padding: 4px;
            }

            /* Adjusted row height to better fit within container */
            .fc .fc-daygrid-day {
                height: 65px !important;
            }

            /* Adjusting event rows spacing */
            .fc .fc-daygrid-day-events {
                padding: 0;
                margin-top: 1px;
                margin-bottom: 0;
            }

            .fc .fc-event {
                border-radius: 2px;
                font-size: 0.7em;
                border: none;
                padding: 1px 2px;
                font-family: 'Poppins', sans-serif;
                margin-bottom: 0; /* Reduced space between events */
                line-height: 1.2;
            }

            .fc .fc-col-header-cell-cushion {
                font-weight: 500;
                color: #4b5563;
                padding: 4px;
                text-transform: uppercase;
                font-size: 0.7rem;
            }

            .fc .fc-event-main {
                padding: 1px 2px;
            }

            .fc .fc-button {
                font-size: 0.85rem;
                padding: 0.3rem 0.6rem;
                font-family: 'Poppins', sans-serif;
            }

            .fc .fc-view-harness {
                background-color: #ffffff;
                border-radius: 0.5rem;
            }

        /* ECharts container styling */
        .chart-container {
            width: 100%;
            height: 100%;
        }

        /* Same-height containers */
        .equal-height-container {
            display: flex;
            flex-direction: column;
            height: 100%;
        }

        .upcoming-events-list {
            flex: 1;
            overflow-y: auto;
            max-height: 450px; /* Set fixed height for scrollbar */
        }

        /* Custom scrollbar styling */
        .custom-scrollbar::-webkit-scrollbar {
            width: 5px;
        }

        .custom-scrollbar::-webkit-scrollbar-track {
            background: transparent;
        }

        .custom-scrollbar::-webkit-scrollbar-thumb {
            background-color: rgba(0, 0, 0, 0.1);
            border-radius: 10px;
        }

            .custom-scrollbar::-webkit-scrollbar-thumb:hover {
                background-color: rgba(0, 0, 0, 0.2);
            }

        /* Hide scrollbar when not hovering */
        .custom-scrollbar {
            scrollbar-width: thin;
            scrollbar-color: transparent transparent;
        }

            .custom-scrollbar:hover {
                scrollbar-color: rgba(0, 0, 0, 0.1) transparent;
            }
    </style>
}

<!-- Welcome Message Banner -->
<div class="bg-white rounded-xl shadow-sm p-6 mb-6">
    <div class="flex items-center">
        <div class="flex-shrink-0 mr-4">
            <div class="bg-primary/10 p-3 rounded-full">
                <i class="ph ph-hand-waving text-3xl text-primary"></i>
            </div>
        </div>
        <div>
            <h2 class="text-xl font-semibold text-gray-800">
                @if (!string.IsNullOrEmpty(welcomeName))
                {
                    <span>Welcome back, @welcomeName! You have successfully logged in!</span>
                }
                else
                {
                    <span>Welcome to Daebak Subdivision Admin Dashboard</span>
                }
            </h2>
            <p class="text-gray-600 mt-1">Here's an overview of what's happening in the subdivision. Have a great day!</p>
        </div>
    </div>
</div>

<!-- Dashboard Content -->
<div class="grid grid-cols-12 gap-6">
    <!-- Quick Stats Overview -->
    <div class="col-span-12 grid grid-cols-1 md:grid-cols-4 gap-6">
        <!-- Total Residents -->
        <div class="bg-white p-6 rounded-xl shadow-sm">
            <div class="flex justify-between items-start">
                <div>
                    <h3 class="text-gray-500 text-sm font-medium">Total Residents</h3>
                    <p class="text-2xl font-semibold text-gray-800 mt-1">1,453</p>
                </div>
                <div class="p-3 bg-blue-50 rounded-lg">
                    <i class="ph ph-users text-2xl text-secondary"></i>
                </div>
            </div>
            <div class="flex items-center mt-4">
                <span class="text-xs text-green-500 font-medium flex items-center">
                    <i class="ph ph-arrow-up mr-1"></i> 12%
                </span>
                <span class="text-xs text-gray-400 ml-2">Since last month</span>
            </div>
        </div>

        <!-- Pending Requests -->
        <div class="bg-white p-6 rounded-xl shadow-sm">
            <div class="flex justify-between items-start">
                <div>
                    <h3 class="text-gray-500 text-sm font-medium">Pending Requests</h3>
                    <p class="text-2xl font-semibold text-gray-800 mt-1">25</p>
                </div>
                <div class="p-3 bg-yellow-50 rounded-lg">
                    <i class="ph ph-hourglass text-2xl text-yellow-500"></i>
                </div>
            </div>
            <div class="flex items-center mt-4">
                <span class="text-xs text-red-500 font-medium flex items-center">
                    <i class="ph ph-arrow-up mr-1"></i> 8%
                </span>
                <span class="text-xs text-gray-400 ml-2">Since last week</span>
            </div>
        </div>

        <!-- Facility Bookings -->
        <div class="bg-white p-6 rounded-xl shadow-sm">
            <div class="flex justify-between items-start">
                <div>
                    <h3 class="text-gray-500 text-sm font-medium">Facility Bookings</h3>
                    <p class="text-2xl font-semibold text-gray-800 mt-1">348</p>
                </div>
                <div class="p-3 bg-green-50 rounded-lg">
                    <i class="ph ph-buildings text-2xl text-green-500"></i>
                </div>
            </div>
            <div class="flex items-center mt-4">
                <span class="text-xs text-green-500 font-medium flex items-center">
                    <i class="ph ph-arrow-up mr-1"></i> 24%
                </span>
                <span class="text-xs text-gray-400 ml-2">Since last month</span>
            </div>
        </div>

        <!-- Monthly Collection -->
        <div class="bg-white p-6 rounded-xl shadow-sm">
            <div class="flex justify-between items-start">
                <div>
                    <h3 class="text-gray-500 text-sm font-medium">Monthly Collection</h3>
                    <p class="text-2xl font-semibold text-gray-800 mt-1">₱1.2M</p>
                </div>
                <div class="p-3 bg-purple-50 rounded-lg">
                    <i class="ph ph-currency-circle-dollar text-2xl text-purple-500"></i>
                </div>
            </div>
            <div class="flex items-center mt-4">
                <span class="text-xs text-green-500 font-medium flex items-center">
                    <i class="ph ph-arrow-up mr-1"></i> 6%
                </span>
                <span class="text-xs text-gray-400 ml-2">Since last month</span>
            </div>
        </div>
    </div>

    <!-- Calendar & Events Section - Same Height Row -->
    <div class="col-span-12 grid grid-cols-12 gap-6 h-[600px]">
        <!-- Calendar Section -->
        <div class="col-span-12 lg:col-span-8 h-full">
            <div class="bg-white p-6 rounded-xl shadow-sm h-full equal-height-container">
                <div class="flex justify-between items-center mb-6">
                    <h3 class="text-lg font-medium text-gray-800">Calendar & Events</h3>
                    <button id="add-event-btn" class="bg-secondary text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-secondary/90 transition-colors flex items-center gap-1">
                        <i class="ph ph-plus"></i> Add Event
                    </button>
                </div>

                <!-- FullCalendar Container -->
                <div id="admin-calendar" class="flex-grow h-[500px]"></div>
            </div>
        </div>

        <!-- Upcoming Events Section -->
        <div class="col-span-12 lg:col-span-4 h-full">
            <!-- Upcoming Events -->
            <div id="upcoming-events-container" class="bg-white p-6 rounded-xl shadow-sm h-full equal-height-container">
                <div class="flex justify-between items-center mb-5">
                    <h3 class="text-lg font-medium text-gray-800">Upcoming Events</h3>
                    <button id="view-history-events-btn" class="text-secondary hover:text-secondary/80 transition-colors text-sm font-medium flex items-center">
                        View History <i class="ph ph-arrow-right ml-1"></i>
                    </button>
                </div>

                <!-- Event List -->
                <ul id="event-list" class="upcoming-events-list custom-scrollbar pr-2"></ul>
            </div>

            <!-- Events History (initially hidden) -->
            <div id="events-history-container" class="bg-white p-6 rounded-xl shadow-sm h-full equal-height-container hidden">
                <div class="flex justify-between items-center mb-5">
                    <h3 class="text-lg font-medium text-gray-800">Event History</h3>
                    <button id="back-to-upcoming-btn" class="text-secondary hover:text-secondary/80 transition-colors text-sm font-medium flex items-center">
                        <i class="ph ph-arrow-left mr-1"></i> Back to Upcoming
                    </button>
                </div>

                <!-- Event History List -->
                <ul id="events-history-list" class="upcoming-events-list custom-scrollbar pr-2"></ul>
            </div>
        </div>
    </div>

    <!-- Charts Section -->
    <div class="col-span-12 lg:col-span-6">
        <div class="bg-white p-6 rounded-xl shadow-sm h-full">
            <h3 class="text-lg font-medium text-gray-800 mb-5">User Growth</h3>
            <!-- User Growth Chart -->
            <div id="userGrowthChart" class="h-64 chart-container"></div>
        </div>
    </div>

    <div class="col-span-12 md:col-span-6 lg:col-span-3">
        <div class="bg-white p-6 rounded-xl shadow-sm h-full">
            <h3 class="text-lg font-medium text-gray-800 mb-5">User Roles</h3>
            <!-- Role Distribution Chart -->
            <div id="roleChart" class="h-64 chart-container"></div>
        </div>
    </div>

    <div class="col-span-12 md:col-span-6 lg:col-span-3">
        <div class="bg-white p-6 rounded-xl shadow-sm h-full">
            <h3 class="text-lg font-medium text-gray-800 mb-5">Bill Status</h3>
            <!-- Bill Payment Status Chart -->
            <div id="billPaymentStatusChart" class="h-64 chart-container"></div>
        </div>
    </div>

    <div class="col-span-12">
        <div class="bg-white p-6 rounded-xl shadow-sm">
            <h3 class="text-lg font-medium text-gray-800 mb-5">Facility Usage</h3>
            <!-- Facility Usage Chart -->
            <div id="facilityBookingChart" class="h-64 chart-container"></div>
        </div>
    </div>
</div>

<!-- Event Modal -->
<div id="event-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 z-50 flex items-center justify-center hidden">
    <div class="bg-white rounded-lg max-w-lg w-full p-5 max-h-[90vh] overflow-y-auto">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-medium text-gray-900">Add New Event</h3>
            <button id="close-event-modal" class="text-gray-500 hover:text-gray-700">
                <i class="ph ph-x text-xl"></i>
            </button>
        </div>

        <!-- Event Form -->
        <form id="event-form" class="space-y-3">
            <!-- Anti-forgery token for form submission -->
            @Html.AntiForgeryToken()

            <!-- Error Alert - Hidden by default -->
            <div id="form-error-alert" class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4 rounded hidden">
                <p id="error-message"></p>
            </div>

            <!-- Title -->
            <div>
                <label for="eventTitle" class="block text-sm font-medium text-gray-700 mb-1">Event Title*</label>
                <input type="text" id="eventTitle" name="eventTitle" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent" required>
            </div>

            <!-- Start Date & Time -->
            <div class="grid grid-cols-2 gap-4">
                <div>
                    <label for="eventStartDate" class="block text-sm font-medium text-gray-700 mb-1">Start Date*</label>
                    <input type="date" id="eventStartDate" name="eventStartDate" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent" required>
                </div>
                <div>
                    <label for="eventStartTime" class="block text-sm font-medium text-gray-700 mb-1">Start Time*</label>
                    <input type="time" id="eventStartTime" name="eventStartTime" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent" required>
                </div>
            </div>

            <!-- End Date & Time -->
            <div class="grid grid-cols-2 gap-4">
                <div>
                    <label for="eventEndDate" class="block text-sm font-medium text-gray-700 mb-1">End Date*</label>
                    <input type="date" id="eventEndDate" name="eventEndDate" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent" required>
                </div>
                <div>
                    <label for="eventEndTime" class="block text-sm font-medium text-gray-700 mb-1">End Time*</label>
                    <input type="time" id="eventEndTime" name="eventEndTime" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent" required>
                </div>
            </div>

            <!-- Location -->
            <div>
                <label for="eventLocation" class="block text-sm font-medium text-gray-700 mb-1">Location*</label>
                <input type="text" id="eventLocation" name="eventLocation" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent" required>
            </div>

            <!-- Description -->
            <div>
                <label for="eventDescription" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                <textarea id="eventDescription" name="eventDescription" rows="2" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"></textarea>
            </div>

            <!-- Form Buttons -->
            <div>
                <div id="form-footer-error" class="text-red-600 text-sm hidden"></div>
                <div class="flex justify-end gap-3 mt-3">
                    <button type="button" id="cancel-event" class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200">Cancel</button>
                    <button type="submit" id="submit-event-btn" class="px-4 py-2 bg-secondary text-white rounded-lg hover:bg-secondary/90">Create Event</button>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Event Details Modal -->
<div id="event-details-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 z-50 flex items-center justify-center hidden" data-event-id="">
    <div class="bg-white rounded-lg max-w-lg w-full p-6">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-medium text-gray-900" id="event-details-title">Event Details</h3>
            <button id="close-event-details" class="text-gray-500 hover:text-gray-700">
                <i class="ph ph-x text-xl"></i>
            </button>
        </div>

        <!-- Event Details View -->
        <div id="event-details-view">
            <div>
                <div class="flex items-center mb-4">
                    <div class="bg-blue-50 p-3 rounded-lg mr-4">
                        <i id="event-details-icon" class="ph ph-calendar-check text-2xl text-secondary"></i>
                    </div>
                    <h2 id="event-details-name" class="text-xl font-medium text-gray-800">Event Title</h2>
                </div>

                <div class="space-y-2">
                    <div class="flex items-start">
                        <i class="ph ph-calendar text-lg text-gray-500 mr-3 mt-0.5"></i>
                        <div>
                            <p class="text-sm text-gray-700 font-medium">Date</p>
                            <p id="event-details-date" class="text-gray-600">January 1, 2023</p>
                        </div>
                    </div>

                    <div class="flex items-start">
                        <i class="ph ph-clock text-lg text-gray-500 mr-3 mt-0.5"></i>
                        <div>
                            <p class="text-sm text-gray-700 font-medium">Time</p>
                            <p id="event-details-time" class="text-gray-600">10:00 AM - 12:00 PM</p>
                        </div>
                    </div>

                    <div class="flex items-start">
                        <i class="ph ph-map-pin text-lg text-gray-500 mr-3 mt-0.5"></i>
                        <div>
                            <p class="text-sm text-gray-700 font-medium">Location</p>
                            <p id="event-details-location" class="text-gray-600">Clubhouse</p>
                        </div>
                    </div>

                    <div class="flex items-start">
                        <i class="ph ph-text-align-left text-lg text-gray-500 mr-3 mt-0.5"></i>
                        <div>
                            <p class="text-sm text-gray-700 font-medium">Description</p>
                            <p id="event-details-description" class="text-gray-600">No description available</p>
                        </div>
                    </div>
                </div>
            </div>

            <div class="border-t border-gray-200 pt-3 mt-3">
                <p class="text-xs text-gray-500">Created by <span id="event-details-created-by">Administrator</span> on <span id="event-details-created-on">January 1, 2023</span></p>
            </div>
        </div>

        <!-- Event Edit Form (initially hidden) -->
        <div id="event-edit-form" class="hidden space-y-2.5">
            <!-- Hidden event ID field for form submission -->
            <input type="hidden" id="edit-event-id">

            <!-- Title -->
            <div>
                <label for="editEventTitle" class="block text-sm font-medium text-gray-700 mb-1">Event Title*</label>
                <input type="text" id="editEventTitle" name="editEventTitle" class="w-full px-3 py-1.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent" required>
            </div>

            <!-- Start Date & Time -->
            <div class="grid grid-cols-2 gap-4">
                <div>
                    <label for="editEventStartDate" class="block text-sm font-medium text-gray-700 mb-1">Start Date*</label>
                    <input type="date" id="editEventStartDate" name="editEventStartDate" class="w-full px-3 py-1.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent" required>
                </div>
                <div>
                    <label for="editEventStartTime" class="block text-sm font-medium text-gray-700 mb-1">Start Time*</label>
                    <input type="time" id="editEventStartTime" name="editEventStartTime" class="w-full px-3 py-1.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent" required>
                </div>
            </div>

            <!-- End Date & Time -->
            <div class="grid grid-cols-2 gap-4">
                <div>
                    <label for="editEventEndDate" class="block text-sm font-medium text-gray-700 mb-1">End Date*</label>
                    <input type="date" id="editEventEndDate" name="editEventEndDate" class="w-full px-3 py-1.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent" required>
                </div>
                <div>
                    <label for="editEventEndTime" class="block text-sm font-medium text-gray-700 mb-1">End Time*</label>
                    <input type="time" id="editEventEndTime" name="editEventEndTime" class="w-full px-3 py-1.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent" required>
                </div>
            </div>

            <!-- Location -->
            <div>
                <label for="editEventLocation" class="block text-sm font-medium text-gray-700 mb-1">Location*</label>
                <input type="text" id="editEventLocation" name="editEventLocation" class="w-full px-3 py-1.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent" required>
            </div>

            <!-- Description -->
            <div>
                <label for="editEventDescription" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                <textarea id="editEventDescription" name="editEventDescription" rows="2" class="w-full px-3 py-1.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"></textarea>
            </div>

            <!-- Form Error -->
            <div id="edit-form-footer-error" class="text-red-600 text-xs hidden"></div>
        </div>

        <!-- Details Footer -->
        <div id="event-details-footer" class="flex justify-end gap-3 border-t border-gray-200 pt-3 mt-3">
            <button id="edit-event-btn" class="px-4 py-1.5 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200">Edit</button>
            <button id="delete-event-btn" class="px-4 py-1.5 bg-red-100 text-red-700 rounded-lg hover:bg-red-200">Delete</button>
            <button id="close-details-btn" class="px-4 py-1.5 bg-secondary text-white rounded-lg hover:bg-secondary/90">Close</button>
        </div>

        <!-- Edit Footer (initially hidden) -->
        <div id="event-edit-footer" class="flex justify-end gap-3 border-t border-gray-200 pt-3 mt-3 hidden">
            <button id="cancel-edit-btn" class="px-4 py-1.5 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors">Cancel</button>
            <button id="save-edit-btn" class="px-4 py-1.5 bg-secondary text-white rounded-lg hover:bg-secondary/90 transition-colors">Save Changes</button>
        </div>
    </div>
</div>

<!-- Event History Modal -->
<div id="event-history-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 z-50 flex items-center justify-center hidden">
    <div class="bg-white rounded-lg max-w-lg w-full p-6 max-h-[90vh] overflow-y-auto">
        <div class="flex justify-between items-center mb-5">
            <h3 class="text-lg font-medium text-gray-900">Event History</h3>
            <button id="close-event-history" class="text-gray-500 hover:text-gray-700">
                <i class="ph ph-x text-xl"></i>
            </button>
        </div>

        <div class="space-y-4">
            <!-- Sample history items - would be dynamically populated in real implementation -->
            <div class="border-l-2 border-secondary pl-4 py-1">
                <p class="text-sm font-medium text-gray-700">Event created</p>
                <p class="text-xs text-gray-500">By Administrator on May 1, 2023 at 10:00 AM</p>
            </div>
            <div class="border-l-2 border-secondary pl-4 py-1">
                <p class="text-sm font-medium text-gray-700">Event details updated</p>
                <p class="text-xs text-gray-500">By Administrator on May 5, 2023 at 2:30 PM</p>
                <p class="text-xs text-gray-600 mt-1">Changed location from "Main Hall" to "Clubhouse"</p>
            </div>
            <div class="border-l-2 border-secondary pl-4 py-1">
                <p class="text-sm font-medium text-gray-700">Event time updated</p>
                <p class="text-xs text-gray-500">By Administrator on May 8, 2023 at 9:15 AM</p>
                <p class="text-xs text-gray-600 mt-1">Changed time from "2:00 PM - 4:00 PM" to "3:00 PM - 5:00 PM"</p>
            </div>
        </div>

        <div class="flex justify-end mt-6">
            <button id="close-history-btn" class="px-4 py-2 bg-secondary text-white rounded-lg hover:bg-secondary/90">Close</button>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="delete-confirmation-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 z-50 flex items-center justify-center hidden" data-event-id="">
    <div class="bg-white rounded-lg max-w-md w-full p-6">
        <h3 class="text-lg font-medium text-gray-900 mb-4">Confirm Deletion</h3>
        <p class="text-gray-500 mb-5">Are you sure you want to delete this event? This action cannot be undone.</p>
        <div class="flex justify-end gap-3">
            <button id="cancel-delete" class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200">Cancel</button>
            <button id="confirm-delete" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700">Yes, Delete</button>
        </div>
    </div>
</div>

<!-- Day Events Modal - To show all events when "+2 more" is clicked -->
<div id="day-events-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 z-50 flex items-center justify-center hidden" data-date="">
    <div class="bg-white rounded-lg max-w-md w-full p-5 max-h-[80vh] overflow-y-auto">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-medium text-gray-900" id="day-events-title">Events on May 1</h3>
            <button id="close-day-events" class="text-gray-500 hover:text-gray-700">
                <i class="ph ph-x text-xl"></i>
            </button>
        </div>

        <!-- Events List -->
        <ul id="day-events-list" class="space-y-3 mb-4"></ul>

        <div class="flex justify-end border-t border-gray-200 pt-3 mt-3">
            <button id="close-day-events-btn" class="px-4 py-2 bg-secondary text-white rounded-lg hover:bg-secondary/90">Close</button>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Toast Notification Container -->
    <div id="toast-container" class="fixed top-4 right-4 z-50"></div>

    <script>
        // Toast notification function
        function showToast(message, type = 'success') {
            const toast = document.createElement('div');
            const bgColor = type === 'success' ? 'bg-green-500' : type === 'error' ? 'bg-red-500' : 'bg-blue-500';

            toast.className = `${bgColor} text-white px-6 py-3 rounded-lg shadow-md mb-3 flex items-center transform transition-all duration-300 translate-x-full`;
            toast.innerHTML = `
                <i class="ph ${type === 'success' ? 'ph-check-circle' : 'ph-x-circle'} text-xl mr-2"></i>
                <span>${message}</span>
            `;

            document.getElementById('toast-container').appendChild(toast);

            // Animate in
            setTimeout(() => {
                toast.classList.remove('translate-x-full');
            }, 10);

            // Remove after 4 seconds
            setTimeout(() => {
                toast.classList.add('translate-x-full');
                setTimeout(() => {
                    toast.remove();
                }, 300);
            }, 4000);
        }

        // Helper function to format time as HH:MM
        function formatTime(date) {
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');
            return `${hours}:${minutes}`;
        }

        // Helper function to format date as YYYY-MM-DD
        function formatDate(date) {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Initialize calendar
            const calendarEl = document.getElementById('admin-calendar');

            // Add null check to prevent TypeError when calendar element doesn't exist
            if (!calendarEl) {
                console.log('Calendar element not found, skipping calendar initialization');
                return;
            }

            // Create calendar with optimized height and display
            const calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                initialDate: '@DateTime.Now.ToString("yyyy-MM-dd")',
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek'
                },
                height: 500, // Fixed height for better consistency across screen sizes
                contentHeight: 'auto',
                fixedWeekCount: false, // Allows calendar to adjust based on number of weeks in month
                views: {
                    dayGridMonth: {
                        dayMaxEventRows: 2, // Limit to 2 events per day
                        aspectRatio: 1.8, // Wider month view
                    },
                    timeGridWeek: {
                        allDaySlot: true, // Show all-day slot at the top
                    }
                },
                // Custom events fetching to filter out completed events
                events: function(info, successCallback, failureCallback) {
                    fetch('@Url.Action("GetEvents", "Events")')
                        .then(response => response.json())
                        .then(events => {
                            // Filter out completed events (end date+time in the past)
                            // Create a date object for May 1, 2025 with current time
                            const now = new Date();
                            const currentDate = new Date('2025-05-01');
                            // Apply the current time to our reference date
                            currentDate.setHours(now.getHours(), now.getMinutes(), now.getSeconds());

                            console.log("Current date and time for calendar filtering:", currentDate.toISOString());

                            const activeEvents = events.filter(event => {
                                const eventEndDate = new Date(event.end);
                                // Include events that haven't ended yet
                                return eventEndDate > currentDate;
                            });

                            console.log(`Calendar: Filtered ${events.length} events to ${activeEvents.length} active events`);
                            successCallback(activeEvents);
                        })
                        .catch(error => {
                            console.error('Error loading events:', error);
                            failureCallback(error);
                        });
                },
                eventClick: function(info) {
                    showEventDetails(info.event);
                },
                // Add handler for "more" link that appears when there are more than 2 events
                moreLinkClick: function(info) {
                    // Show modal with all events for this day
                    showDayEvents(info.date, info.allSegs.map(seg => seg.event));

                    // Return false to prevent default action (prevents default popover)
                    return false;
                },
                eventDisplay: 'block',
                eventTimeFormat: {
                    hour: '2-digit',
                    minute: '2-digit',
                    meridiem: 'short'
                },
                // Add spacing between events on the same date
                eventDidMount: function(info) {
                    info.el.style.margin = "1px 0"; // Add vertical margin between events
                }
            });

            calendar.render();

            // Load real events from the server for upcoming events list
            loadUpcomingEvents();

            // Add Event Button Functionality
            const addEventBtn = document.getElementById('add-event-btn');
            const eventModal = document.getElementById('event-modal');
            const closeEventModalBtn = document.getElementById('close-event-modal');
            const cancelEventBtn = document.getElementById('cancel-event');
            const eventForm = document.getElementById('event-form');

            // Set today's date as default for the event form
            const today = new Date();
            const todayFormatted = formatDate(today);
            document.getElementById('eventStartDate').value = todayFormatted;
            document.getElementById('eventEndDate').value = todayFormatted;

            // Open event modal
            addEventBtn.addEventListener('click', function() {
                eventModal.classList.remove('hidden');
                document.body.style.overflow = 'hidden'; // Prevent scrolling
            });

            // Close event modal
            closeEventModalBtn.addEventListener('click', function() {
                eventModal.classList.add('hidden');
                document.body.style.overflow = ''; // Re-enable scrolling
                resetEventForm();
            });

            // Cancel event creation
            cancelEventBtn.addEventListener('click', function() {
                eventModal.classList.add('hidden');
                document.body.style.overflow = ''; // Re-enable scrolling
                resetEventForm();
            });

            // Close modal when clicking outside
            eventModal.addEventListener('click', function(e) {
                if (e.target === eventModal) {
                    eventModal.classList.add('hidden');
                    document.body.style.overflow = '';
                    resetEventForm();
                }
            });

            // Event form submission
            eventForm.addEventListener('submit', function(e) {
                e.preventDefault();

                // Clear previous errors
                document.getElementById('form-error-alert').classList.add('hidden');

                const formData = new FormData(eventForm);

                // Basic validation
                const startDate = formData.get('eventStartDate');
                const endDate = formData.get('eventEndDate');
                const startTime = formData.get('eventStartTime');
                const endTime = formData.get('eventEndTime');

                if (!startDate || !endDate || !startTime || !endTime) {
                    showFormError('All date and time fields are required');
                    return;
                }

                // Check if the event is in the past - use strict comparison
                const currentDate = new Date('2025-05-01T00:00:00'); // Use the current date (May 1, 2025)
                const eventStartDateTime = new Date(`${startDate}T${startTime}:00`);

                // Compare timestamps for accurate comparison
                if (eventStartDateTime.getTime() < currentDate.getTime()) {
                    showFormError('Cannot create events in the past. Please select a future date and time.');
                    return;
                }

                // Create the event data object matching the EventViewModel in the controller
                const eventData = {
                    Title: formData.get('eventTitle'),
                    Description: formData.get('eventDescription') || '',
                    StartDate: formData.get('eventStartDate'),
                    StartTime: formData.get('eventStartTime'),
                    EndDate: formData.get('eventEndDate'),
                    EndTime: formData.get('eventEndTime'),
                    Location: formData.get('eventLocation')
                };

                // Send to server
                submitEvent(eventData);
            });

            // Submit event function
            function submitEvent(eventData) {
                // Show loading state
                const submitBtn = document.getElementById('submit-event-btn');
                const originalText = submitBtn.innerHTML;
                submitBtn.disabled = true;
                submitBtn.innerHTML = 'Creating...';

                // Clear previous errors
                document.getElementById('form-error-alert').classList.add('hidden');
                const footerError = document.getElementById('form-footer-error');
                footerError.classList.add('hidden');
                footerError.textContent = '';

                // Get the anti-forgery token
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                // Send the data to the controller
                fetch('@Url.Action("CreateEvent", "Events")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify(eventData)
                })
                .then(response => {
                    if (!response.ok) {
                        return response.text().then(text => {
                            if (!text || text.trim() === '') {
                                throw new Error(`Server returned ${response.status} ${response.statusText}`);
                            }
                            try {
                                return JSON.parse(text);
                            } catch (e) {
                                throw new Error("Server error: " + text);
                            }
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    // Reset button state
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = originalText;

                    if (data && data.success) {
                        // Add the event to the calendar
                        calendar.addEvent({
                            id: data.id,
                            title: data.title,
                            start: data.start,
                            end: data.end,
                            color: data.backgroundColor,
                            extendedProps: {
                                location: data.location,
                                description: data.description,
                                createdBy: data.createdBy,
                                createdOn: data.createdAt
                            }
                        });

                        // Close the modal
                        eventModal.classList.add('hidden');
                        document.body.style.overflow = ''; // Re-enable scrolling
                        resetEventForm();

                        // Show success toast
                        showToast('Event created successfully!', 'success');

                        // Refresh the upcoming events list
                        loadUpcomingEvents();

                        // Force calendar render to show new event
                        calendar.render();
                    } else {
                        showFooterError(data && data.message ? data.message : 'Failed to create event - Server returned invalid response');
                    }
                })
                .catch(error => {
                    console.error("Fetch error:", error);

                    // Reset button state
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = originalText;

                    showFooterError('Failed to create event: ' + error.message);
                });
            }

            // Show footer error
            function showFooterError(message) {
                const footerError = document.getElementById('form-footer-error');
                footerError.textContent = message;
                footerError.classList.remove('hidden');
            }

            // The old showFormError can be kept for backwards compatibility
            function showFormError(message) {
                showFooterError(message);
            }

            // Reset event form
            function resetEventForm() {
                eventForm.reset();
                document.getElementById('form-error-alert').classList.add('hidden');
                document.getElementById('eventStartDate').value = todayFormatted;
                document.getElementById('eventEndDate').value = todayFormatted;
            }

            // Load upcoming events from server
            function loadUpcomingEvents() {
                fetch('@Url.Action("GetEvents", "Events")')
                    .then(response => response.json())
                    .then(events => {
                        renderUpcomingEvents(events);
                    })
                    .catch(error => {
                        console.error('Error loading events:', error);
                    });
            }

            // Render upcoming events list with date grouping (no limiting)
            function renderUpcomingEvents(events) {
                const eventList = document.getElementById('event-list');
                if (!eventList) return;

                console.log("Rendering upcoming events:", events.length, "events found");

                // Clear current list
                eventList.innerHTML = '';

                // Create the current date and time using same approach as calendar
                // Use current browser time but with May 1, 2025 date
                const now = new Date();
                const currentDate = new Date('2025-05-01');
                // Apply the current time to our reference date
                currentDate.setHours(now.getHours(), now.getMinutes(), now.getSeconds());

                console.log("Current date and time for upcoming events filtering:", currentDate.toISOString());

                // Filter for upcoming events (end time > current time)
                const upcomingEvents = events.filter(event => {
                    const eventEndDate = new Date(event.end);
                    // Only include events that haven't ended yet
                    return eventEndDate > currentDate;
                }).sort((a, b) => new Date(a.start) - new Date(b.start)); // Sort by start date

                console.log("Filtered upcoming events:", upcomingEvents.length);

                if (upcomingEvents.length === 0) {
                    eventList.innerHTML = '<li class="text-center text-gray-500 py-4">No upcoming events</li>';
                    return;
                }

                // Group events by date
                const eventsByDate = {};
                upcomingEvents.forEach(event => {
                    const eventDate = new Date(event.start);
                    const dateKey = eventDate.toISOString().split('T')[0]; // YYYY-MM-DD format

                    if (!eventsByDate[dateKey]) {
                        eventsByDate[dateKey] = [];
                    }

                    eventsByDate[dateKey].push(event);
                });

                console.log("Events grouped by date:", Object.keys(eventsByDate).length, "dates");

                // Render all events grouped by date
                Object.keys(eventsByDate).sort().forEach(dateKey => {
                    const dateEvents = eventsByDate[dateKey];
                    const dateObj = new Date(dateKey);
                    const formattedDate = dateObj.toLocaleDateString('en-US', {
                        weekday: 'short',
                        month: 'short',
                        day: 'numeric',
                        year: 'numeric' // Include year in the date display
                    });

                    console.log(`Rendering ${dateEvents.length} events for ${formattedDate}`);

                    // Create date header
                    const dateHeader = document.createElement('div');
                    dateHeader.className = 'bg-gray-50 px-3 py-2 rounded-md mb-2 mt-4 text-xs font-medium text-gray-600';
                    dateHeader.textContent = formattedDate;
                    eventList.appendChild(dateHeader);

                    // Show all events for this date - no limits
                    dateEvents.forEach(event => {
                        renderEventItem(event, eventList);
                    });
                });
            }

            // Helper function to render a single event item
            function renderEventItem(event, container) {
                const eventStartDate = new Date(event.start);
                const eventEndDate = new Date(event.end);

                const eventItem = document.createElement('li');
                eventItem.className = 'p-3 rounded-lg border-l-4 transition-all hover:bg-gray-50 mb-3';
                eventItem.style.borderLeftColor = event.backgroundColor || '#356480';

                // Get appropriate icon based on event title
                let icon = 'ph-calendar-check';
                if (event.title.toLowerCase().includes('meeting')) {
                    icon = 'ph-users';
                } else if (event.title.toLowerCase().includes('maintenance')) {
                    icon = 'ph-wrench';
                } else if (event.title.toLowerCase().includes('clean')) {
                    icon = 'ph-broom';
                } else if (event.title.toLowerCase().includes('easter')) {
                    icon = 'ph-egg';
                } else if (event.title.toLowerCase().includes('garden')) {
                    icon = 'ph-plant';
                }

                // Format date
                const formattedDate = eventStartDate.toLocaleDateString('en-US', {
                    month: 'short',
                    day: 'numeric'
                });

                eventItem.innerHTML = `
                    <div class="flex items-center">
                        <div class="text-center mr-3 bg-gray-50 rounded-full h-10 w-10 flex items-center justify-center">
                            <span class="block text-sm font-bold text-gray-600">${formattedDate}</span>
                        </div>
                        <div>
                            <p class="font-medium flex items-center">
                                <i class="ph ${icon} mr-2" style="color: ${event.backgroundColor || '#356480'}"></i>
                                ${event.title}
                            </p>
                            <div class="flex items-center text-xs text-gray-500 mt-1">
                                <i class="ph ph-clock text-gray-400 mr-1"></i>
                                <span>${eventStartDate.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })} - ${eventEndDate.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</span>
                            </div>
                            <div class="flex items-center text-xs text-gray-500 mt-1">
                                <i class="ph ph-map-pin text-gray-400 mr-1"></i>
                                <span>${event.location || 'No location specified'}</span>
                            </div>
                        </div>
                    </div>
                `;

                // Add click event to show details
                eventItem.addEventListener('click', function() {
                    showEventDetails({
                        id: event.id,
                        title: event.title,
                        start: eventStartDate,
                        end: eventEndDate,
                        extendedProps: {
                            location: event.location,
                            description: event.description,
                            createdBy: event.createdBy,
                            createdOn: event.createdAt
                        },
                        backgroundColor: event.backgroundColor
                    });
                });

                container.appendChild(eventItem);
            }

            // Show event details function
            function showEventDetails(event) {
                const detailsModal = document.getElementById('event-details-modal');
                if (!detailsModal) return;

                // Set event ID for reference
                detailsModal.dataset.eventId = event.id;

                // Fill in details
                document.getElementById('event-details-name').textContent = event.title;
                document.getElementById('event-details-date').textContent = event.start.toLocaleDateString('en-US', { weekday: 'long', month: 'long', day: 'numeric', year: 'numeric' });
                document.getElementById('event-details-time').textContent = `${event.start.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })} - ${event.end.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}`;
                document.getElementById('event-details-location').textContent = event.extendedProps?.location || 'No location specified';
                document.getElementById('event-details-description').textContent = event.extendedProps?.description || 'No description available';
                document.getElementById('event-details-created-by').textContent = event.extendedProps?.createdBy || 'Administrator';

                const createdDate = event.extendedProps?.createdOn ? new Date(event.extendedProps.createdOn) : new Date();
                document.getElementById('event-details-created-on').textContent = createdDate.toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' });

                // Update icon color to match event
                const eventIcon = document.getElementById('event-details-icon');
                eventIcon.style.color = event.backgroundColor || '#356480';

                // Show modal
                detailsModal.classList.remove('hidden');
                document.body.style.overflow = 'hidden'; // Prevent scrolling

                // Set up close buttons
                document.getElementById('close-event-details').addEventListener('click', closeEventDetails);
                document.getElementById('close-details-btn').addEventListener('click', closeEventDetails);

                // Close modal when clicking outside
                detailsModal.addEventListener('click', function(e) {
                    if (e.target === detailsModal) {
                        closeEventDetails();
                    }
                });
            }

            // Close event details function
            function closeEventDetails() {
                const detailsModal = document.getElementById('event-details-modal');
                if (!detailsModal) return;

                detailsModal.classList.add('hidden');
                document.body.style.overflow = ''; // Re-enable scrolling
            }

            // Initialize charts
            const roleChart = echarts.init(document.getElementById('roleChart'));
            const billChart = echarts.init(document.getElementById('billPaymentStatusChart'));
            const userGrowthChart = echarts.init(document.getElementById('userGrowthChart'));
            const facilityBookingChart = echarts.init(document.getElementById('facilityBookingChart'));

            // Role Distribution Chart Configuration
            const roleOption = {
                tooltip: {
                    trigger: 'item'
                },
                series: [
                    {
                        name: 'Role Distribution',
                        type: 'pie',
                        radius: ['40%', '70%'],
                        avoidLabelOverlap: false,
                        itemStyle: {
                            borderRadius: 10,
                            borderColor: '#fff',
                            borderWidth: 2
                        },
                        label: {
                            show: false,
                            position: 'center'
                        },
                        emphasis: {
                            label: {
                                show: true,
                                fontSize: 16,
                                fontWeight: 'bold'
                            }
                        },
                        labelLine: {
                            show: false
                        },
                        data: [
                            { value: 335, name: 'Admin', itemStyle: { color: '#356480' } },
                            { value: 1048, name: 'Homeowner', itemStyle: { color: '#94B0DF' } },
                            { value: 580, name: 'Staff', itemStyle: { color: '#2c3e50' } }
                        ]
                    }
                ]
            };

            // Bill Payment Chart Configuration
            const billOption = {
                tooltip: {
                    trigger: 'item'
                },
                series: [
                    {
                        name: 'Payment Status',
                        type: 'pie',
                        radius: ['40%', '70%'],
                        avoidLabelOverlap: false,
                        itemStyle: {
                            borderRadius: 10,
                            borderColor: '#fff',
                            borderWidth: 2
                        },
                        label: {
                            show: false,
                            position: 'center'
                        },
                        emphasis: {
                            label: {
                                show: true,
                                fontSize: 16,
                                fontWeight: 'bold'
                            }
                        },
                        labelLine: {
                            show: false
                        },
                        data: [
                            { value: 500, name: 'Paid', itemStyle: { color: '#4ade80' } },
                            { value: 300, name: 'Pending', itemStyle: { color: '#facc15' } },
                            { value: 200, name: 'Overdue', itemStyle: { color: '#f87171' } }
                        ]
                    }
                ]
            };

            // User Growth Chart Configuration
            const userGrowthOption = {
                tooltip: {
                    trigger: 'axis'
                },
                xAxis: {
                    type: 'category',
                    data: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
                },
                yAxis: {
                    type: 'value'
                },
                series: [
                    {
                        name: '2024 Growth',
                        type: 'line',
                        smooth: true,
                        data: [15, 25, 30, 45, 55, 65, 75, 85, 95, 100, 110, 120],
                        itemStyle: { color: '#94B0DF' }
                    },
                    {
                        name: '2025 Growth',
                        type: 'line',
                        smooth: true,
                        data: [20, 35, 45, 60, 70, 80, 90, 100, 110, 120, 130, 140],
                        itemStyle: { color: '#356480' }
                    }
                ]
            };

            // Facility Booking Chart Configuration
            const facilityBookingOption = {
                tooltip: {
                    trigger: 'axis',
                    axisPointer: {
                        type: 'shadow'
                    }
                },
                xAxis: {
                    type: 'value'
                },
                yAxis: {
                    type: 'category',
                    data: ['Basketball Court', 'Function Hall', 'Swimming Pool', 'Gym', 'Tennis Court']
                },
                series: [
                    {
                        name: 'Monthly Bookings',
                        type: 'bar',
                        data: [85, 65, 45, 35, 25],
                        itemStyle: {
                            color: new echarts.graphic.LinearGradient(0, 0, 1, 0, [
                                { offset: 0, color: '#94B0DF' },
                                { offset: 1, color: '#356480' }
                            ])
                        }
                    }
                ]
            };

            // Apply chart configurations
            roleChart.setOption(roleOption);
            billChart.setOption(billOption);
            userGrowthChart.setOption(userGrowthOption);
            facilityBookingChart.setOption(facilityBookingOption);

            // Handle window resize for charts and calendar
            window.addEventListener('resize', () => {
                roleChart.resize();
                billChart.resize();
                userGrowthChart.resize();
                facilityBookingChart.resize();
                calendar.updateSize();
            });

            // Event history view toggle
            const viewHistoryBtn = document.getElementById('view-history-events-btn');
            const backToUpcomingBtn = document.getElementById('back-to-upcoming-btn');
            const upcomingEventsContainer = document.getElementById('upcoming-events-container');
            const eventsHistoryContainer = document.getElementById('events-history-container');

            if (viewHistoryBtn && backToUpcomingBtn) {
                // View history button
                viewHistoryBtn.addEventListener('click', function() {
                    upcomingEventsContainer.classList.add('hidden');
                    eventsHistoryContainer.classList.remove('hidden');

                    // Get past events from server
                    fetch('@Url.Action("GetEvents", "Events")')
                        .then(response => response.json())
                        .then(events => {
                            // Filter for past events - both events from before May 1, 2025 and events that have ended
                            const now = new Date('2025-05-01T00:00:00Z'); // Current date: May 1, 2025
                            const pastEvents = events.filter(event => {
                                const eventEndDate = new Date(event.end);
                                return eventEndDate < now;
                            }).sort((a, b) => new Date(b.start) - new Date(a.start)); // Most recent first

                            renderEventHistory(pastEvents);
                        })
                        .catch(error => {
                            console.error('Error loading past events:', error);
                            renderEventHistory([]);
                        });
                });

                // Back to upcoming button
                backToUpcomingBtn.addEventListener('click', function() {
                    eventsHistoryContainer.classList.add('hidden');
                    upcomingEventsContainer.classList.remove('hidden');
                });
            }

            // Render event history list
            function renderEventHistory(events) {
                const eventsHistoryList = document.getElementById('events-history-list');
                if (!eventsHistoryList) return;

                // Clear current list
                eventsHistoryList.innerHTML = '';

                if (events.length === 0) {
                    eventsHistoryList.innerHTML = '<li class="text-center text-gray-500 py-4">No past events</li>';
                    return;
                }

                // Add each event to the history list
                events.forEach(event => {
                    const eventStartDate = new Date(event.start);
                    const eventEndDate = new Date(event.end);

                    const eventItem = document.createElement('li');
                    eventItem.className = 'bg-gray-50 rounded-lg p-4 border border-gray-100';
                    eventItem.innerHTML = `
                        <div class="flex items-center gap-3">
                            <div class="w-3 h-12 rounded-full bg-opacity-70" style="background-color: ${event.color}"></div>
                            <div class="flex-grow">
                                <h4 class="font-medium text-gray-700">${event.title}</h4>
                                <div class="flex items-center text-xs text-gray-500 mt-1">
                                    <i class="ph ph-calendar text-gray-400 mr-1"></i>
                                    <span>${eventStartDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}</span>
                                </div>
                                <div class="flex items-center text-xs text-gray-500 mt-1">
                                    <i class="ph ph-clock text-gray-400 mr-1"></i>
                                    <span>${eventStartDate.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })} - ${eventEndDate.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</span>
                                </div>
                            </div>
                        </div>
                    `;

                    // Add click event to show details
                    eventItem.addEventListener('click', function() {
                        showEventDetails({
                            id: event.id,
                            title: event.title,
                            start: eventStartDate,
                            end: eventEndDate,
                            extendedProps: {
                                location: event.location,
                                description: event.description,
                                createdBy: event.createdBy,
                                createdOn: event.createdOn
                            },
                            backgroundColor: event.color
                        });
                    });

                    eventsHistoryList.appendChild(eventItem);
                });
            }

            // =============================
            // Event Edit Functionality
            // =============================
            const editEventBtn = document.getElementById('edit-event-btn');
            const cancelEditBtn = document.getElementById('cancel-edit-btn');
            const saveEditBtn = document.getElementById('save-edit-btn');
            const eventDetailsView = document.getElementById('event-details-view');
            const eventEditForm = document.getElementById('event-edit-form');
            const eventDetailsFooter = document.getElementById('event-details-footer');
            const eventEditFooter = document.getElementById('event-edit-footer');

            // Edit event button functionality
            if (editEventBtn) {
                editEventBtn.addEventListener('click', function() {
                    // Get the event ID from the modal
                    const eventId = document.getElementById('event-details-modal').dataset.eventId;
                    document.getElementById('edit-event-id').value = eventId;

                    // Fill form with current event details
                    document.getElementById('editEventTitle').value = document.getElementById('event-details-name').textContent;
                    document.getElementById('editEventLocation').value = document.getElementById('event-details-location').textContent;
                    document.getElementById('editEventDescription').value = document.getElementById('event-details-description').textContent;

                    // Parse date and time from the details
                    const dateStr = document.getElementById('event-details-date').textContent;
                    const timeStr = document.getElementById('event-details-time').textContent;
                    const [startTimeStr, endTimeStr] = timeStr.split(' - ');

                    // Convert to proper format for input fields
                    const eventDate = new Date(dateStr);
                    const formattedDate = formatDate(eventDate);

                    // Set date fields
                    document.getElementById('editEventStartDate').value = formattedDate;
                    document.getElementById('editEventEndDate').value = formattedDate;

                    // Parse time strings to set time fields
                    // First, format times to 24-hour format
                    const startDate = new Date(`${dateStr} ${startTimeStr}`);
                    const endDate = new Date(`${dateStr} ${endTimeStr}`);

                    document.getElementById('editEventStartTime').value = formatTime(startDate);
                    document.getElementById('editEventEndTime').value = formatTime(endDate);

                    // Switch to edit view
                    eventDetailsView.classList.add('hidden');
                    eventEditForm.classList.remove('hidden');
                    eventDetailsFooter.classList.add('hidden');
                    eventEditFooter.classList.remove('hidden');
                });
            }

            // Cancel edit button functionality
            if (cancelEditBtn) {
                cancelEditBtn.addEventListener('click', function() {
                    // Switch back to details view
                    eventDetailsView.classList.remove('hidden');
                    eventEditForm.classList.add('hidden');
                    eventDetailsFooter.classList.remove('hidden');
                    eventEditFooter.classList.add('hidden');
                });
            }

            // Save edit button functionality
            if (saveEditBtn) {
                saveEditBtn.addEventListener('click', function() {
                    const eventId = document.getElementById('edit-event-id').value;

                    // Get form values
                    const updatedEventData = {
                        Title: document.getElementById('editEventTitle').value,
                        Description: document.getElementById('editEventDescription').value || '',
                        StartDate: document.getElementById('editEventStartDate').value,
                        StartTime: document.getElementById('editEventStartTime').value,
                        EndDate: document.getElementById('editEventEndDate').value,
                        EndTime: document.getElementById('editEventEndTime').value,
                        Location: document.getElementById('editEventLocation').value
                    };

                    // Validation
                    if (!updatedEventData.Title || !updatedEventData.StartDate || !updatedEventData.EndDate ||
                        !updatedEventData.StartTime || !updatedEventData.EndTime || !updatedEventData.Location) {
                        showToast('Please fill in all required fields', 'error');
                        return;
                    }

                    // Check if the edited event is in the past - use strict timestamp comparison
                    const currentDate = new Date('2025-05-01T00:00:00'); // Use the current date (May 1, 2025)
                    const eventStartDateTime = new Date(`${updatedEventData.StartDate}T${updatedEventData.StartTime}:00`);

                    if (eventStartDateTime.getTime() < currentDate.getTime()) {
                        showToast('Cannot edit events to occur in the past. Please select a future date and time.', 'error');
                        return;
                    }

                    // Disable button during request
                    saveEditBtn.disabled = true;
                    saveEditBtn.innerText = 'Saving...';

                    // Get the anti-forgery token
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                    // Send update request to server
                    fetch(`@Url.Action("Edit", "Events")/` + eventId, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify(updatedEventData)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Update the event details view
                            document.getElementById('event-details-name').textContent = updatedEventData.Title;

                            // Format the date display
                            const updatedStartDate = new Date(`${updatedEventData.StartDate}T${updatedEventData.StartTime}`);
                            const updatedEndDate = new Date(`${updatedEventData.EndDate}T${updatedEventData.EndTime}`);

                            document.getElementById('event-details-date').textContent = updatedStartDate.toLocaleDateString('en-US', {
                                weekday: 'long', month: 'long', day: 'numeric', year: 'numeric'
                            });

                            document.getElementById('event-details-time').textContent =
                                `${updatedStartDate.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })} -
                                ${updatedEndDate.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}`;

                            document.getElementById('event-details-location').textContent = updatedEventData.Location;
                            document.getElementById('event-details-description').textContent = updatedEventData.Description || 'No description available';

                            // Switch back to details view
                            eventDetailsView.classList.remove('hidden');
                            eventEditForm.classList.add('hidden');
                            eventDetailsFooter.classList.remove('hidden');
                            eventEditFooter.classList.add('hidden');

                            // Show success message
                            showToast('Event updated successfully!', 'success');

                            // Refresh the calendar and event list
                            calendar.refetchEvents();
                            loadUpcomingEvents();
                        } else {
                            showToast(data.message || 'Failed to update event', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error updating event:', error);
                        showToast('An error occurred while updating the event', 'error');
                    })
                    .finally(() => {
                        // Re-enable button
                        saveEditBtn.disabled = false;
                        saveEditBtn.innerText = 'Save Changes';
                    });
                });
            }

            // Event Delete Functionality
            const deleteEventBtn = document.getElementById('delete-event-btn');
            const deleteConfirmationModal = document.getElementById('delete-confirmation-modal');
            const cancelDeleteBtn = document.getElementById('cancel-delete');
            const confirmDeleteBtn = document.getElementById('confirm-delete');

            // Delete event button functionality
            if (deleteEventBtn) {
                deleteEventBtn.addEventListener('click', function() {
                    // Get the event ID from the details modal
                    const eventId = document.getElementById('event-details-modal').dataset.eventId;
                    deleteConfirmationModal.dataset.eventId = eventId;

                    // Show confirmation modal
                    deleteConfirmationModal.classList.remove('hidden');
                    document.body.style.overflow = 'hidden'; // Prevent scrolling
                });
            }

            // Cancel delete button functionality
            if (cancelDeleteBtn) {
                cancelDeleteBtn.addEventListener('click', function() {
                    deleteConfirmationModal.classList.add('hidden');
                    document.body.style.overflow = ''; // Re-enable scrolling
                });
            }

            // Confirm delete button functionality
            if (confirmDeleteBtn) {
                confirmDeleteBtn.addEventListener('click', function() {
                    const eventId = deleteConfirmationModal.dataset.eventId;

                    // Disable button during request
                    confirmDeleteBtn.disabled = true;
                    confirmDeleteBtn.innerText = 'Deleting...';

                    // Get the anti-forgery token
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                    // Send delete request to server
                    fetch('@Url.Action("DeleteEvent", "Events")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': token
                        },
                        body: `id=${eventId}`
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Close the confirmation and details modals
                            deleteConfirmationModal.classList.add('hidden');
                            document.getElementById('event-details-modal').classList.add('hidden');
                            document.body.style.overflow = ''; // Re-enable scrolling

                            // Show success message
                            showToast('Event deleted successfully!', 'success');

                            // Refresh the calendar and event list
                            calendar.refetchEvents();
                            loadUpcomingEvents();
                        } else {
                            showToast(data.message || 'Failed to delete event', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error deleting event:', error);
                        showToast('An error occurred while deleting the event', 'error');
                    })
                    .finally(() => {
                        // Re-enable button
                        confirmDeleteBtn.disabled = false;
                        confirmDeleteBtn.innerText = 'Yes, Delete';
                    });
                });
            }

            // Close delete modal when clicking outside
            deleteConfirmationModal.addEventListener('click', function(e) {
                if (e.target === deleteConfirmationModal) {
                    deleteConfirmationModal.classList.add('hidden');
                    document.body.style.overflow = '';
                }
            });

            // Function to show all events for a specific day in a modal
            function showDayEvents(date, events) {
                const dayEventsModal = document.getElementById('day-events-modal');
                const dayEventsList = document.getElementById('day-events-list');
                const dayEventsTitle = document.getElementById('day-events-title');

                if (!dayEventsModal || !dayEventsList) return;

                // Format the date for the title
                const formattedDate = date.toLocaleDateString('en-US', {
                    weekday: 'long',
                    month: 'long',
                    day: 'numeric',
                    year: 'numeric'
                });

                // Set modal title
                dayEventsTitle.textContent = `Events on ${formattedDate}`;

                // Clear previous event list
                dayEventsList.innerHTML = '';

                // Add each event to the list
                if (events && events.length > 0) {
                    events.forEach(event => {
                        const eventItem = document.createElement('li');
                        eventItem.className = 'p-3 rounded-lg border-l-4 hover:bg-gray-50 cursor-pointer transition-colors';
                        eventItem.style.borderLeftColor = event.backgroundColor || '#356480';

                        const startTime = event.start.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });
                        const endTime = event.end.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });

                        eventItem.innerHTML = `
                            <div class="flex flex-col">
                                <p class="font-medium">${event.title}</p>
                                <div class="flex items-center text-xs text-gray-500 mt-1">
                                    <i class="ph ph-clock text-gray-400 mr-1"></i>
                                    <span>${startTime} - ${endTime}</span>
                                </div>
                                <div class="flex items-center text-xs text-gray-500 mt-1">
                                    <i class="ph ph-map-pin text-gray-400 mr-1"></i>
                                    <span>${event.extendedProps?.location || 'No location specified'}</span>
                                </div>
                            </div>
                        `;

                        // Add click event to show details and close this modal
                        eventItem.addEventListener('click', function() {
                            // First, close the day events modal
                            dayEventsModal.classList.add('hidden');

                            // Then show the event details
                            showEventDetails(event);
                        });

                        dayEventsList.appendChild(eventItem);
                    });
                } else {
                    dayEventsList.innerHTML = '<li class="text-center text-gray-500 py-4">No events on this day</li>';
                }

                // Show the modal
                dayEventsModal.classList.remove('hidden');
                document.body.style.overflow = 'hidden'; // Prevent scrolling

                // Set up close functionality
                const closeBtn = document.getElementById('close-day-events');
                const closeBtnFooter = document.getElementById('close-day-events-btn');

                if (closeBtn) {
                    closeBtn.addEventListener('click', closeDayEventsModal);
                }

                if (closeBtnFooter) {
                    closeBtnFooter.addEventListener('click', closeDayEventsModal);
                }

                // Close when clicking outside
                dayEventsModal.addEventListener('click', function(e) {
                    if (e.target === dayEventsModal) {
                        closeDayEventsModal();
                    }
                });
            }

            // Function to close the day events modal
            function closeDayEventsModal() {
                const dayEventsModal = document.getElementById('day-events-modal');
                if (dayEventsModal) {
                    dayEventsModal.classList.add('hidden');
                    document.body.style.overflow = ''; // Re-enable scrolling
                }
            }
        });
    </script>
}