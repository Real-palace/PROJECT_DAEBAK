@model IEnumerable<daebak_subdivision_website.Models.Announcement>
@{
    ViewData["Title"] = "Manage Announcements";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var currentUserId = User.FindFirst("UserId")?.Value;
}

<div class="p-6">
    @if (TempData["SuccessMessage"] != null)
    {
        <div id="success-alert" class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-6 rounded relative" role="alert">
            <div class="flex items-center">
                <i class="ph ph-check-circle text-xl mr-2"></i>
                <p>@TempData["SuccessMessage"]</p>
            </div>
            <button class="absolute top-0 right-0 p-2" onclick="this.parentElement.remove()">
                <i class="ph ph-x"></i>
            </button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div id="error-alert" class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded relative" role="alert">
            <div class="flex items-center">
                <i class="ph ph-warning-circle text-xl mr-2"></i>
                <p>@TempData["ErrorMessage"]</p>
            </div>
            <button class="absolute top-0 right-0 p-2" onclick="this.parentElement.remove()">
                <i class="ph ph-x"></i>
            </button>
        </div>
    }

    <!-- Announcements List -->
    <div class="bg-white p-5 rounded-xl shadow-md mb-6">
        <!-- Search and Filter Options -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <!-- Search Box -->
            <div class="flex items-center relative">
                <i class="ph ph-magnifying-glass text-gray-400 absolute left-3 top-3"></i>
                <input type="text" id="announcement-search" placeholder="Search announcements..." class="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary" />
            </div>

            <!-- Category Filter -->
            <div>
                <select id="category-filter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary">
                    <option value="all">All Categories</option>
                    <option value="NOTICE">Notices</option>
                    <option value="EVENT">Events</option>
                    <option value="MAINTENANCE">Maintenance</option>
                    <option value="POLICY">Policy Updates</option>
                </select>
            </div>

            <!-- Add Announcement Button -->
            <div class="flex justify-end">
                <button id="create-announcement-btn" class="flex items-center gap-1 px-4 py-2 bg-secondary text-white rounded-md hover:bg-secondary/80 transition-colors">
                    <i class="ph ph-plus"></i>
                    Add New Announcement
                </button>
            </div>
        </div>
    </div>

    @if (!Model.Any())
    {
        <!-- Empty State -->
        <div class="bg-white p-5 rounded-xl shadow-md flex flex-col items-center justify-center py-12 text-center">
            <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                <i class="ph ph-megaphone-simple text-2xl text-gray-400"></i>
            </div>
            <h3 class="text-lg font-medium text-gray-900">No announcements yet</h3>
            <p class="mt-1 text-sm text-gray-500">Create your first announcement to notify residents of important updates.</p>
            <button id="empty-create-btn" class="mt-4 px-5 py-2 bg-secondary text-white rounded-md hover:bg-secondary/80 transition-colors flex items-center gap-1">
                <i class="ph ph-plus"></i> Create first announcement
            </button>
        </div>
    }
    else
    {
        <!-- Announcements Table -->
        <div class="bg-white p-5 rounded-xl shadow-md overflow-hidden">
            <div class="overflow-x-auto">
                <table id="announcements-table" class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Title & Content
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Category
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Created
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Actions
                            </th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200" id="announcementTableBody">
                        @foreach (var announcement in Model)
                        {
                            <tr class="announcement-row hover:bg-gray-50 transition-colors" data-announcement-id="@announcement.ANNOUNCEMENT_ID" data-category="@announcement.Category">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div>
                                        <div class="text-sm font-medium text-gray-900 announcement-title">@announcement.Title</div>
                                        <div class="text-sm text-gray-500 line-clamp-2 announcement-content">@announcement.Content</div>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-@announcement.CategoryColor-100 text-@announcement.CategoryColor-800">
                                        @announcement.Category
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    <div>@announcement.CreatedAt.ToString("MMM dd, yyyy")</div>
                                    <div class="text-xs text-gray-400">
                                        by @(announcement.CreatedByUser != null ? $"{announcement.CreatedByUser.FirstName} {announcement.CreatedByUser.LastName}" : "Admin")
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                    <div class="flex items-center gap-2">
                                        <button class="view-btn text-primary hover:text-primary-dark" data-id="@announcement.ANNOUNCEMENT_ID" title="View Announcement">
                                            <i class="ph ph-eye"></i>
                                        </button>
                                        <button class="edit-btn text-primary hover:text-primary-dark" data-id="@announcement.ANNOUNCEMENT_ID" title="Edit Announcement">
                                            <i class="ph ph-pencil-simple"></i>
                                        </button>
                                        <button class="delete-btn text-red-600 hover:text-red-900" data-id="@announcement.ANNOUNCEMENT_ID" title="Delete Announcement">
                                            <i class="ph ph-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <div class="mt-4 flex items-center justify-between">
                <div class="text-sm text-gray-500">
                    Showing <span id="showing-start">1</span> to <span id="showing-end">@Model.Count()</span> of <span id="total-announcements">@Model.Count()</span> announcements
                </div>
                <div class="flex items-center">
                    <button id="prev-page" class="px-3 py-1 border border-gray-300 rounded-md mr-2 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50" disabled>
                        <i class="ph ph-caret-left"></i>
                    </button>
                    <div class="flex items-center">
                        <span id="current-page" class="mx-2">1</span> of <span id="total-pages" class="mx-2">1</span>
                    </div>
                    <button id="next-page" class="px-3 py-1 border border-gray-300 rounded-md ml-2 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50" disabled>
                        <i class="ph ph-caret-right"></i>
                    </button>
                </div>
            </div>

            <!-- Empty search results state -->
            <div id="no-results" class="hidden flex flex-col items-center justify-center py-12 text-center">
                <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                    <i class="ph ph-magnifying-glass text-2xl text-gray-400"></i>
                </div>
                <h3 class="text-lg font-medium text-gray-900">No matching announcements</h3>
                <p class="mt-1 text-sm text-gray-500">Try adjusting your search or filter criteria.</p>
            </div>
        </div>
    }
</div>

<!-- Create/Edit Announcement Modal -->
<div id="announcement-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 z-50 flex items-center justify-center hidden">
    <div class="bg-white rounded-lg max-w-2xl w-full p-6 max-h-[90vh] overflow-y-auto">
        <div class="flex justify-between items-center mb-4">
            <h3 id="modal-title" class="text-lg font-medium text-gray-900">Create New Announcement</h3>
            <button id="close-modal" class="text-gray-500 hover:text-gray-700">
                <i class="ph ph-x text-xl"></i>
            </button>
        </div>

        <!-- Announcement Form -->
        <form id="announcement-form" class="space-y-4">
            <!-- Anti-forgery token -->
            @Html.AntiForgeryToken()

            <!-- Hidden ID field for edit mode -->
            <input type="hidden" id="announcement-id" name="ANNOUNCEMENT_ID" value="0">

            <!-- Error container -->
            <div id="form-error" class="bg-red-100 text-red-700 p-3 rounded-md hidden"></div>

            <!-- Title -->
            <div>
                <label for="announcement-title" class="block text-sm font-medium text-gray-700 mb-1">Title*</label>
                <input type="text" id="announcement-title" name="TITLE" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent" required>
            </div>

            <!-- Category -->
            <div>
                <label for="announcement-category" class="block text-sm font-medium text-gray-700 mb-1">Category*</label>
                <select id="announcement-category" name="Category" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent">
                    <option value="NOTICE" data-color="blue">Notice</option>
                    <option value="EVENT" data-color="green">Event</option>
                    <option value="MAINTENANCE" data-color="yellow">Maintenance</option>
                    <option value="POLICY" data-color="purple">Policy Update</option>
                </select>
            </div>

            <!-- Content -->
            <div>
                <label for="announcement-content" class="block text-sm font-medium text-gray-700 mb-1">Content*</label>
                <textarea id="announcement-content" name="CONTENT" rows="5" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent" required></textarea>
            </div>

            <!-- Hidden category color field -->
            <input type="hidden" id="announcement-category-color" name="CategoryColor" value="blue">

            <!-- Form Buttons -->
            <div class="flex justify-end gap-3 mt-5">
                <button type="button" id="cancel-btn" class="px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 transition-colors">Cancel</button>
                <button type="submit" id="submit-btn" class="px-4 py-2 bg-primary text-white rounded-md hover:bg-primary/80 transition-colors">
                    Create Announcement
                </button>
            </div>
        </form>
    </div>
</div>

<!-- View Announcement Modal -->
<div id="view-announcement-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 z-50 flex items-center justify-center hidden">
    <div class="bg-white rounded-lg max-w-2xl w-full p-6 max-h-[90vh] overflow-y-auto">
        <div class="flex justify-between items-center mb-4">
            <h3 id="view-title" class="text-xl font-semibold text-gray-900">Announcement Title</h3>
            <button id="close-view-modal" class="text-gray-500 hover:text-gray-700">
                <i class="ph ph-x text-xl"></i>
            </button>
        </div>

        <div class="mb-4">
            <span id="view-category" class="px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-600">
                Category
            </span>
            <span id="view-date" class="text-sm text-gray-500 ml-2">
                Jan 01, 2023
            </span>
        </div>

        <div class="prose max-w-none mb-5">
            <p id="view-content" class="text-gray-700">Announcement content goes here.</p>
        </div>

        <div class="pt-4 border-t border-gray-200">
            <p class="text-xs text-gray-500">
                Posted by <span id="view-author">Administrator</span>
            </p>
        </div>

        <div class="flex justify-end mt-5">
            <button id="close-view-btn" class="px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 transition-colors mr-3">
                Close
            </button>
            <button id="view-edit-btn" class="px-4 py-2 bg-primary text-white rounded-md hover:bg-primary/80 transition-colors">
                Edit
            </button>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="delete-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 z-50 flex items-center justify-center hidden" data-id="0">
    <div class="bg-white rounded-lg max-w-md w-full p-6">
        <h3 class="text-lg font-medium text-gray-900 mb-4">Confirm Deletion</h3>
        <p class="text-gray-500 mb-5">Are you sure you want to delete this announcement? This action cannot be undone.</p>
        <div class="flex justify-end gap-3">
            <button id="cancel-delete" class="px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 transition-colors">
                Cancel
            </button>
            <button id="confirm-delete" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors">
                Yes, Delete
            </button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // ============================================================
            // Variables
            // ============================================================
            const announcementModal = document.getElementById('announcement-modal');
            const viewAnnouncementModal = document.getElementById('view-announcement-modal');
            const deleteModal = document.getElementById('delete-modal');
            const announcementForm = document.getElementById('announcement-form');
            const createBtns = document.querySelectorAll('#create-announcement-btn');
            const emptyCreateBtn = document.getElementById('empty-create-btn');
            const closeModalBtn = document.getElementById('close-modal');
            const cancelBtn = document.getElementById('cancel-btn');
            const searchInput = document.getElementById('announcement-search');
            const categoryFilter = document.getElementById('category-filter');
            const noResults = document.getElementById('no-results');
            const announcementRows = document.querySelectorAll('.announcement-row');
            const prevPageBtn = document.getElementById('prev-page');
            const nextPageBtn = document.getElementById('next-page');
            const currentPageEl = document.getElementById('current-page');
            const totalPagesEl = document.getElementById('total-pages');
            const showingStartEl = document.getElementById('showing-start');
            const showingEndEl = document.getElementById('showing-end');
            const totalAnnouncementsEl = document.getElementById('total-announcements');

            let isEditMode = false;
            let currentPage = 1;
            let rowsPerPage = 10;

            // ============================================================
            // Helper Functions
            // ============================================================

            // Show/hide modals
            function showModal(modal) {
                modal.classList.remove('hidden');
                document.body.style.overflow = 'hidden'; // Prevent scrolling
            }

            function hideModal(modal) {
                modal.classList.add('hidden');
                document.body.style.overflow = '';
            }

            // Reset form
            function resetForm() {
                announcementForm.reset();
                document.getElementById('announcement-id').value = "0";
                document.getElementById('modal-title').textContent = "Create New Announcement";
                document.getElementById('submit-btn').textContent = "Create Announcement";
                document.getElementById('form-error').classList.add('hidden');
                document.getElementById('form-error').textContent = '';

                // Reset category color
                document.getElementById('announcement-category-color').value = 'blue';

                isEditMode = false;
            }

            // Show form error
            function showFormError(message) {
                const errorElement = document.getElementById('form-error');
                errorElement.textContent = message;
                errorElement.classList.remove('hidden');
            }

            // Format date
            function formatDate(dateString) {
                const date = new Date(dateString);
                return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
            }

            // Toast notification
            function showToast(message, type = 'success') {
                // Create toast container if it doesn't exist
                let container = document.getElementById('toast-container');
                if (!container) {
                    container = document.createElement('div');
                    container.id = 'toast-container';
                    container.className = 'fixed top-4 right-4 z-50 flex flex-col items-end';
                    document.body.appendChild(container);
                }

                // Create toast element
                const toast = document.createElement('div');
                const bgColor = type === 'success' ? 'bg-green-500' : type === 'error' ? 'bg-red-500' : 'bg-blue-500';
                toast.className = `${bgColor} text-white px-4 py-3 rounded-lg shadow-lg mb-3 flex items-center transition-all duration-300 transform translate-x-full`;

                // Toast content
                toast.innerHTML = `
                    <i class="ph ${type === 'success' ? 'ph-check-circle' : 'ph-x-circle'} text-xl mr-2"></i>
                    <span>${message}</span>
                `;

                // Add to container
                container.appendChild(toast);

                // Animate in
                setTimeout(() => {
                    toast.classList.remove('translate-x-full');
                }, 10);

                // Remove after 4 seconds
                setTimeout(() => {
                    toast.classList.add('translate-x-full');
                    setTimeout(() => {
                        if (container.contains(toast)) {
                            container.removeChild(toast);
                        }
                    }, 300);
                }, 4000);
            }

            // Auto-close alerts after 5 seconds
            const alerts = document.querySelectorAll('#success-alert, #error-alert');
            alerts.forEach(alert => {
                setTimeout(() => {
                    alert.classList.add('opacity-0', 'transition-opacity');
                    setTimeout(() => {
                        if (alert.parentElement) {
                            alert.remove();
                        }
                    }, 300);
                }, 5000);
            });

            // ============================================================
            // Pagination Functions
            // ============================================================

            // Update pagination display
            function updatePagination() {
                const table = document.getElementById('announcements-table');
                if (!table) return;

                // Get visible rows (not filtered out)
                const visibleRows = Array.from(table.querySelectorAll('tbody tr:not(.hidden)'));
                const totalRows = visibleRows.length;
                const totalPages = Math.max(1, Math.ceil(totalRows / rowsPerPage));

                // Ensure current page is valid
                currentPage = Math.min(Math.max(1, currentPage), totalPages);

                // Update pagination text
                if (totalPagesEl) totalPagesEl.textContent = totalPages;
                if (currentPageEl) currentPageEl.textContent = currentPage;

                // Calculate start and end indices
                const start = (currentPage - 1) * rowsPerPage;
                const end = Math.min(start + rowsPerPage, totalRows);

                // Update showing text
                if (showingStartEl && totalRows > 0) showingStartEl.textContent = start + 1;
                if (showingEndEl) showingEndEl.textContent = end;
                if (totalAnnouncementsEl) totalAnnouncementsEl.textContent = totalRows;

                // Enable/disable pagination buttons
                if (prevPageBtn) prevPageBtn.disabled = currentPage <= 1;
                if (nextPageBtn) nextPageBtn.disabled = currentPage >= totalPages;

                // Show/hide rows based on current page
                visibleRows.forEach((row, index) => {
                    if (index >= start && index < end) {
                        row.classList.remove('pagination-hidden');
                    } else {
                        row.classList.add('pagination-hidden');
                    }
                });
            }

            // Add pagination CSS
            const style = document.createElement('style');
            style.textContent = `
                .pagination-hidden {
                    display: none !important;
                }
            `;
            document.head.appendChild(style);

            // Initialize pagination
            updatePagination();

            // Pagination event listeners
            if (prevPageBtn) {
                prevPageBtn.addEventListener('click', function() {
                    if (currentPage > 1) {
                        currentPage--;
                        updatePagination();
                    }
                });
            }

            if (nextPageBtn) {
                nextPageBtn.addEventListener('click', function() {
                    const totalRows = document.querySelectorAll('#announcements-table tbody tr:not(.hidden)').length;
                    const totalPages = Math.max(1, Math.ceil(totalRows / rowsPerPage));

                    if (currentPage < totalPages) {
                        currentPage++;
                        updatePagination();
                    }
                });
            }

            // ============================================================
            // Form Submission
            // ============================================================
            announcementForm.addEventListener('submit', function(e) {
                e.preventDefault();

                // Gather form data
                const formData = new FormData(announcementForm);
                const announcementId = parseInt(formData.get('ANNOUNCEMENT_ID'));

                // Update category color based on selected category
                const categorySelect = document.getElementById('announcement-category');
                const selectedOption = categorySelect.options[categorySelect.selectedIndex];
                const categoryColor = selectedOption.dataset.color;
                formData.set('CategoryColor', categoryColor);

                // Convert form data to object
                const data = {};
                formData.forEach((value, key) => {
                    data[key] = value;
                });

                // Set loading state
                const submitBtn = document.getElementById('submit-btn');
                const originalText = submitBtn.textContent;
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<i class="ph ph-circle-notch animate-spin mr-2"></i> ' + (isEditMode ? 'Updating...' : 'Creating...');

                // Clear previous errors
                document.getElementById('form-error').classList.add('hidden');

                // Get the anti-forgery token
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                // Determine if creating new or editing existing
                const url = isEditMode ? '@Url.Action("EditAjax", "Announcements")' : '@Url.Action("CreateAjax", "Announcements")';

                // Send the data to the controller
                fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify(data)
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    // Reset button state
                    submitBtn.disabled = false;
                    submitBtn.textContent = originalText;

                    if (data.success) {
                        // Hide modal
                        hideModal(announcementModal);

                        // Show success message
                        showToast(isEditMode ? 'Announcement updated successfully!' : 'Announcement created successfully!', 'success');

                        // Reload the page after a brief delay
                        setTimeout(() => {
                            window.location.reload();
                        }, 500);
                    } else {
                        // Show error
                        showFormError(data.message || 'An error occurred. Please try again.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);

                    // Reset button state
                    submitBtn.disabled = false;
                    submitBtn.textContent = originalText;

                    // Show error
                    showFormError('An error occurred while submitting the form. Please try again.');
                });
            });

            // ============================================================
            // Event Listeners
            // ============================================================

            // Create new announcement
            createBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    resetForm();
                    showModal(announcementModal);
                });
            });

            // Create button on empty state
            if (emptyCreateBtn) {
                emptyCreateBtn.addEventListener('click', function() {
                    resetForm();
                    showModal(announcementModal);
                });
            }

            // Close modal
            if (closeModalBtn) {
                closeModalBtn.addEventListener('click', function() {
                    hideModal(announcementModal);
                });
            }

            // Cancel button
            if (cancelBtn) {
                cancelBtn.addEventListener('click', function() {
                    hideModal(announcementModal);
                });
            }

            // Category color selection
            document.getElementById('announcement-category').addEventListener('change', function() {
                const color = this.options[this.selectedIndex].dataset.color;
                document.getElementById('announcement-category-color').value = color;
            });

            // Edit buttons
            document.querySelectorAll('.edit-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const id = this.dataset.id;
                    editAnnouncement(id);
                });
            });

            // View buttons
            document.querySelectorAll('.view-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const id = this.dataset.id;
                    viewAnnouncement(id);
                });
            });

            // Delete buttons
            document.querySelectorAll('.delete-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const id = this.dataset.id;
                    confirmDelete(id);
                });
            });

            // Close view modal
            document.getElementById('close-view-modal').addEventListener('click', function() {
                hideModal(viewAnnouncementModal);
            });

            document.getElementById('close-view-btn').addEventListener('click', function() {
                hideModal(viewAnnouncementModal);
            });

            // Edit from view modal
            document.getElementById('view-edit-btn').addEventListener('click', function() {
                const id = viewAnnouncementModal.dataset.announcementId;
                hideModal(viewAnnouncementModal);
                editAnnouncement(id);
            });

            // Cancel delete
            document.getElementById('cancel-delete').addEventListener('click', function() {
                hideModal(deleteModal);
            });

            // Confirm delete
            document.getElementById('confirm-delete').addEventListener('click', function() {
                const id = parseInt(deleteModal.dataset.id);
                deleteAnnouncement(id);
            });

            // Close modals when clicking outside
            announcementModal.addEventListener('click', function(e) {
                if (e.target === announcementModal) {
                    hideModal(announcementModal);
                }
            });

            viewAnnouncementModal.addEventListener('click', function(e) {
                if (e.target === viewAnnouncementModal) {
                    hideModal(viewAnnouncementModal);
                }
            });

            deleteModal.addEventListener('click', function(e) {
                if (e.target === deleteModal) {
                    hideModal(deleteModal);
                }
            });

            // Search functionality
            if (searchInput) {
                searchInput.addEventListener('input', function() {
                    filterAnnouncements();
                    currentPage = 1; // Reset to first page when searching
                    updatePagination();
                });
            }

            // Category filter
            if (categoryFilter) {
                categoryFilter.addEventListener('change', function() {
                    filterAnnouncements();
                    currentPage = 1; // Reset to first page when filtering
                    updatePagination();
                });
            }

            // ============================================================
            // CRUD Functions
            // ============================================================

            // View announcement details
            function viewAnnouncement(id) {
                // Find the announcement row
                const row = document.querySelector(`.announcement-row[data-announcement-id="${id}"]`);
                if (!row) return;

                // Get data from the row
                const title = row.querySelector('.announcement-title').textContent;
                const content = row.querySelector('.announcement-content').textContent;
                const categoryEl = row.querySelector('td:nth-child(2) span');
                const category = categoryEl.textContent.trim();
                const categoryClasses = categoryEl.className;
                const date = row.querySelector('td:nth-child(3) div:first-child').textContent.trim();
                const author = row.querySelector('td:nth-child(3) div:last-child').textContent.replace('by', '').trim();

                // Set data in view modal
                document.getElementById('view-title').textContent = title;
                document.getElementById('view-content').textContent = content;
                document.getElementById('view-category').textContent = category;
                document.getElementById('view-category').className = categoryClasses;
                document.getElementById('view-date').textContent = date;
                document.getElementById('view-author').textContent = author;

                // Store the ID for potential edit action
                viewAnnouncementModal.dataset.announcementId = id;

                // Show modal
                showModal(viewAnnouncementModal);
            }

            // Edit announcement
            function editAnnouncement(id) {
                // Find the announcement row
                const row = document.querySelector(`.announcement-row[data-announcement-id="${id}"]`);
                if (!row) return;

                // Get data from the row
                const title = row.querySelector('.announcement-title').textContent;
                const content = row.querySelector('.announcement-content').textContent;
                const category = row.querySelector('td:nth-child(2) span').textContent.trim();

                // Set form to edit mode
                document.getElementById('announcement-id').value = id;
                document.getElementById('announcement-title').value = title;
                document.getElementById('announcement-content').value = content;

                // Set category
                const categorySelect = document.getElementById('announcement-category');
                for (let i = 0; i < categorySelect.options.length; i++) {
                    if (categorySelect.options[i].text.trim() === category) {
                        categorySelect.selectedIndex = i;
                        document.getElementById('announcement-category-color').value = categorySelect.options[i].dataset.color;
                        break;
                    }
                }

                // Update modal title and button
                document.getElementById('modal-title').textContent = "Edit Announcement";
                document.getElementById('submit-btn').textContent = "Update Announcement";

                // Set edit mode flag
                isEditMode = true;

                // Show modal
                showModal(announcementModal);
            }

            // Confirm delete
            function confirmDelete(id) {
                deleteModal.dataset.id = id;
                showModal(deleteModal);
            }

            // Delete announcement
            function deleteAnnouncement(id) {
                // Get the anti-forgery token
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                // Set loading state
                const deleteBtn = document.getElementById('confirm-delete');
                const originalText = deleteBtn.textContent;
                deleteBtn.disabled = true;
                deleteBtn.innerHTML = '<i class="ph ph-circle-notch animate-spin mr-2"></i> Deleting...';

                // Send delete request
                fetch('@Url.Action("DeleteAjax", "Announcements")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    // Format the ID as an object with an 'id' property
                    body: JSON.stringify({ id: id })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    // Reset button state
                    deleteBtn.disabled = false;
                    deleteBtn.textContent = originalText;

                    if (data.success) {
                        // Hide modal
                        hideModal(deleteModal);

                        // Show success message
                        showToast('Announcement deleted successfully!', 'success');

                        // Remove the row from the table or reload the page
                        const row = document.querySelector(`.announcement-row[data-announcement-id="${id}"]`);
                        if (row) {
                            row.style.height = row.offsetHeight + 'px';
                            row.style.opacity = '0';
                            row.style.transform = 'translateX(-10px)';
                            row.style.transition = 'all 0.3s ease';

                            setTimeout(() => {
                                row.style.height = '0';
                                row.style.padding = '0';
                                row.style.margin = '0';
                                row.style.borderWidth = '0';
                                setTimeout(() => {
                                    row.remove();

                                    // Update pagination after removing a row
                                    updatePagination();

                                    // Check if there are any rows left
                                    if (document.querySelectorAll('.announcement-row').length === 0) {
                                        window.location.reload();
                                    }
                                }, 300);
                            }, 300);
                        } else {
                            // Reload the page if row can't be found
                            setTimeout(() => {
                                window.location.reload();
                            }, 500);
                        }
                    } else {
                        // Show error
                        showToast(data.message || 'Failed to delete announcement.', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);

                    // Reset button state
                    deleteBtn.disabled = false;
                    deleteBtn.textContent = originalText;

                    // Show error
                    showToast('An error occurred. Please try again.', 'error');
                });
            }

            // Search/filter functions
            function filterAnnouncements() {
                const searchTerm = searchInput.value.toLowerCase().trim();
                const selectedCategory = categoryFilter.value.toLowerCase();
                const table = document.getElementById('announcements-table');
                const rows = table.querySelectorAll('tbody tr');
                let hasVisibleRows = false;

                rows.forEach(row => {
                    const title = row.querySelector('.announcement-title').textContent.toLowerCase();
                    const content = row.querySelector('.announcement-content').textContent.toLowerCase();
                    const category = row.dataset.category.toLowerCase();

                    // Check if row matches search and filter
                    const matchesSearch = title.includes(searchTerm) || content.includes(searchTerm);
                    const matchesFilter = selectedCategory === 'all' || category === selectedCategory;

                    if (matchesSearch && matchesFilter) {
                        row.classList.remove('hidden');
                        hasVisibleRows = true;
                    } else {
                        row.classList.add('hidden');
                    }
                });

                // Show/hide no results message
                if (hasVisibleRows) {
                    if (noResults) noResults.classList.add('hidden');
                } else {
                    if (noResults) noResults.classList.remove('hidden');
                }

                // Update pagination after filtering
                updatePagination();
            }

            // Check if there are any visible rows
            function checkForEmptyResults() {
                const table = document.getElementById('announcements-table');
                if (!table) return;

                const visibleRows = table.querySelectorAll('tbody tr:not(.hidden)');

                if (visibleRows.length === 0) {
                    if (noResults) noResults.classList.remove('hidden');
                } else {
                    if (noResults) noResults.classList.add('hidden');
                }

                // Update pagination after checking results
                updatePagination();
            }
        });
    </script>
}